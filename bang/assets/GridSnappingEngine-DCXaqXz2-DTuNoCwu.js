import{bM as j,d5 as E,a8 as z,c$ as $,v as s,I as l,t as k}from"./index-DLCK036j.js";import{H as F}from"./vec32-BuqRmYBM-B6LKH8XJ.js";import{U as G,O as L}from"./projection-m8vi7Cxv-BuVyJKtc.js";import{f as D}from"./normalizeUtils-b-vZURob-BIabC0gV.js";import{f as H}from"./scaleUtils-DtnDbXa5-B6HiPhja.js";import{P as I,Q as W,k as Z}from"./gridUtils-D2du44-d-D-1yhW_E.js";import{ag as m,L as A,a5 as O,ah as B,a as J}from"./SketchViewModel-T2dNp9Tt-CeN_ZXbL.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./utils-DuaeuwP5-CdraT6m4.js";import"./utils-Jw-4AGsF-BSico8Dw.js";import"./geodesicUtils-DV-lFWtb-Cx7V8dER.js";import"./UpdatingHandles-DBzjq66S-CEJdRC8U.js";import"./GraphicsLayer-GkJJfSu5-De07LlFZ.js";import"./GraphicsCollection-rAFZo1AJ-D3q4fb3Z.js";import"./Layer-B8q-l4yV-DlMQBbMD.js";import"./TimeExtent-gZaEUVeW-BUn-hcPj.js";import"./ScaleRangeLayer-DIxukUBC-BwjR_XBk.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-DzmXEA9_-DztFF8jq.js";import"./parser-hXQyB-Qx-0O8XoX6M.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-DBxfiOb6.js";import"./ElevationInfo-DkWlof50-C_baW6of.js";import"./lengthUtils-wU9RRIqK-6yOWjVC2.js";import"./globalCss-CFN4F315-V02Tm0_R.js";import"./Queue-B8H6jIv7-k1wSGyg-.js";import"./signal-DxzURL18-CRkfADK_.js";import"./Version-BTMwSXf1-C3jyfoNK.js";import"./quantityUtils-RaoZoCNH-DAarpSIv.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CEUyUoff-BBc0aQ6D.js";import"./projectVectorToVector-D0K_S4MR-BrbAo-oG.js";import"./projectPointToVector-CG1hALQu-CmOjuJi0.js";import"./Query-CxQYWcUQ-D02jkGF0.js";import"./Field-Cj6Pz3TI-CGEB4sTS.js";import"./fieldType-VTpxE-EM-p8dmQEPg.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./plane-B_adY3_o-MuWsfH1u.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./mat4f64-BaJwL7tQ-k0uMm8LY.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./sphere-Cj20syUS-Db4FwWQN.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";let o=class extends j{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){var t;return E(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t||!G(i.center.spatialReference,t))return null;try{const r=L(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?D(r.x,this.view.center.x,t):r.x;return m(n,r.y,r.z)}catch(r){return z.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:I(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?$(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*H(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?W(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,e){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=e.feature)!=null&&u.attributes&&A in e.feature.attributes)return[];const p=e.coordinateHelper.arrayToPoint(t),a=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(p,a)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:p,gridCenter:a,viewMetersPerPixel:u,viewMetersPerSRUnit:g,offsetScaleFactor:S,spatialReference:h,gridMetersPerStride:C,pixelsPerStride:b}=this;if(!(r&&u&&g&&a&&h&&S&&C&&b)||!r.dynamicScaling&&b<Z||!G(t.spatialReference,h))return e;const w=L(t,h),X=m(w.x,w.y,w.z),c=f(X,-p,a,-n),P=C/g*S,d=Q(c,P,a),{shouldSnapX:v,shouldSnapY:y}=T(d,c,i,u,g);if(!v&&!y)return[];const Y=m((v?d:c)[0],(y?d:c)[1]),M=f(Y,p,a,n),U=f(d,p,a,n);if(y){const R=V(d,c,P,"y"),x=f(R,p,a,n);e.push(new O({lineStart:U,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=V(d,c,P,"x"),x=f(R,p,a,n);e.push(new O({lineStart:U,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&y&&e.push(new B(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([k("esri.views.interactive.snapping.GridSnappingEngine")],o);const f=(t,i,e,r)=>{const n=J(t[0],t[1],t[2]);return F(n,F(n,n,e,i),e,r)},Q=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,p=Math.trunc(r),a=Math.trunc(n),u=Math.round(r%1),g=Math.round(n%1),S=e[0]+(p+u)*i,h=e[1]+(a+g)*i;return m(S,h)},T=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const p=(t[0]-i[0])/r,a=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(p*n)<e,shouldSnapY:Math.abs(a*n)<e}},V=(t,i,e,r)=>{if(r==="y"){const p=i[0]>t[0]?1:-1;return m(t[0]+e*p,t[1])}const n=i[1]>t[1]?1:-1;return m(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
