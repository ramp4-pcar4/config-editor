import{an as v,u as l,N as f,bL as h,ar as Q,am as V,aE as A,D as Y,aD as X,bd as x,t as ee,l3 as se,a6 as te,be as E,bD as re}from"./index-DECxckyg.js";import{a as oe}from"./uuid-Dj9mdEVg-BaKSCiyT.js";import{d as ne,M as ae,H as ie,v as R,g as _}from"./External-DqjNpFcZ-Cw-NCdPb.js";import{p as ce,c as le,m as ue,f as pe,$ as k,x as me,g as fe,d as de,l as ge,i as he}from"./meshSpatialReferenceScaleUtils-DJw_5eMU-DKs-N5by.js";import{j as ye,L as we,b as Pe,s as be,i as Te}from"./infoFor3D-BeWnZejW-CnXQECJx.js";import{e as ve,s as Ae}from"./meshFeatureAttributes-BKpzm8ZZ-D6hUbJO-.js";import"./MeshTransform-ByFk-Izc-DPgvny0N.js";import"./mat4-OOmHNWi7-BlAajtXL.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./quat-DQgq9Ar5-D4T-DUHh.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec32-Cj8pVsU0-_k_0y_aO.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./axisAngleDegrees-BTSCyz4U-Be0UjJRO.js";const M={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function y(s,t=r=>{},e){return new Me(s,t,e)}let Me=class{constructor(s,t=r=>{},e){if(this.onProgress=t,this.taskName=e,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof s=="number"){this._weights={};for(let r=0;r<s;r++){const o=r,n=1/s;this._weights[o]=n,this._progressMap.set(o,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[t,e]of this._progressMap.entries())s+=e*this._weights[t];if(s===1&&v("enable-feature:esri-3dofl-upload-timings")){const t=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${t} sec`);for(const[e,r]of this._timingsMap){const o=Math.round(r.end-r.start)/1e3,n=Math.round(o/t*100);console.log(this.taskName??"Task",{stepKey:e,stepTime:o,relativeTime:n})}}this.onProgress(s)}setProgress(s,t){if(this._progressMap.set(s,t),v("enable-feature:esri-3dofl-upload-timings")){const e=performance.now();this._startTime??(this._startTime=e);const r=Y(this._timingsMap,s,()=>({start:e,end:0}));t===1&&(r.end=e)}this.emitProgress()}simulate(s,t){return I(e=>this.setProgress(s,e),t)}makeOnProgress(s){return t=>this.setProgress(s,t)}};function I(s=e=>{},t=xe){const e=performance.now();s(0);const r=setInterval(()=>{const o=performance.now()-e,n=1-Math.exp(-o/t);s(n)},Fe);return X(()=>{clearInterval(r),s(1)})}function Ne(s,t=De){return x(E(s*B/t))}function je(s,t=Se){return x(E(s*B/t))}const De=10,Se=10,B=8e-6,Fe=A(50),xe=A(1e3),C=1e6,F=20*C,Ee=2e9,Re=3;async function _e({data:s,name:t,description:e},r,o){let n=null;try{const a=h(r,"uploads"),i=h(a,"info"),{data:u}=await f(i,{query:{f:"json"},responseType:"json"});l(o);const d=re(r),g=u.maxUploadFileSize*C,m=d?Ee:g,c=d?Math.min(F,g):F;if(s.size>m)throw new Error("Data too large");const L=h(a,"register"),{data:N}=await f(L,{query:{f:"json",itemName:ke(t),description:e},responseType:"json",method:"post"});if(l(o),!N.success)throw new Error("Registration failed");const{itemID:z}=N.item;n=h(a,z);const H=h(n,"uploadPart"),j=Math.ceil(s.size/c),w=new Array;for(let p=0;p<j;++p)w.push(s.slice(p*c,Math.min((p+1)*c,s.size)));const P=w.slice().reverse(),D=new Array,G=y(j,o==null?void 0:o.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const p=w.length-P.length,b=P.pop(),T=new FormData,K=G.simulate(p,Ne(b.size));try{T.append("f","json"),T.append("file",b),T.append("partId",`${p}`);const{data:Z}=await f(H,{timeout:0,body:T,responseType:"json",method:"post"});if(l(o),!Z.success)throw new Error("Part upload failed")}finally{K.remove()}}};for(let p=0;p<Re&&P.length!==0;++p)D.push(J());await Promise.all(D);const W=h(n,"commit"),{data:S}=await f(W,{query:{f:"json",parts:w.map((p,b)=>b).join(",")},responseType:"json",method:"post"});if(l(o),!S.success)throw new Error("Commit failed");return S.item}catch(a){if(n!=null){const i=h(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function ke(s){return s.replaceAll("/","_").replaceAll("\\","_")}async function ws(s,t,e){var n;const r=s.length;if(!r)return(n=e==null?void 0:e.onProgress)==null||n.call(e,1),[];const o=y(r,e==null?void 0:e.onProgress,"uploadAssets");return Promise.all(s.map((a,i)=>Ie(a,t,{...e,onProgress:o.makeOnProgress(i)})))}async function Ie(s,{layer:t,ongoingUploads:e},r){var a;const o=e.get(s);if(o)return o;if(!Xe(t))throw new ce;if(Be(s,t))return(a=r==null?void 0:r.onProgress)==null||a.call(r,1),s;const n=Ce(s,t,r);e.set(s,n);try{await n}finally{e.delete(s)}return s}function Be(s,t){const{parsedUrl:e}=t;return e!=null&&s.metadata.externalSources.some(r=>ne(r,e))}async function Ce(s,t,e){const{metadata:r}=s,{displaySource:o}=r,n=O(o==null?void 0:o.source,t,{checkForConversionRequired:v("enable-feature:georeferenced-uploads")}),a=n!=null?Oe(n,t,e):r.externalSources.length>0?Ue(s,t,e):qe(s,t,e),i=await a;return l(e),s.addExternalSources([i]),s}async function Oe(s,t,e){return{source:{type:"service",assets:await U(s,t,e)},original:!0,unitConversionDisabled:!0}}async function Ue(s,t,e){const r=$(t),{externalSources:o}=s.metadata,n=Le(o,t);if(!n)throw new le;const a=y(M.uploadConvertibleSource,e==null?void 0:e.onProgress,"uploadConvertibleSource"),i={type:"service",assets:await U(n,t,{onProgress:a.makeOnProgress("uploadEditSource")})};s.addExternalSources([{source:i,original:!0}]);const u=n.reduce((g,{asset:m})=>m instanceof File?g+m.size:g,0),d=a.simulate("serviceAssetsToGlb",je(u));try{const{source:g,transform:m,origin:c}=await Ze(i,t,r);return s.transform=m,c&&(s.metadata.georeferenced=!0,e!=null&&e.useAssetOrigin&&(s.vertexSpace.origin=[c.x,c.y,c.z??0],s.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function qe(s,t,e){const r=y(M.uploadLocalMesh,e==null?void 0:e.onProgress,"uploadLocalMesh"),o=$e(s,t,{...e,onProgress:r.makeOnProgress("meshToAssetBlob")});return{source:{type:"service",assets:await q([o],t,{...e,onProgress:r.makeOnProgress("uploadAssetBlobs")})},extent:s.extent.clone(),original:!0}}async function $e(s,t,e){const r=$(t),o=await s.load(e),n=await o.toBinaryGLTF({origin:o.origin,signal:e==null?void 0:e.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(e),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${oe()}.glb`,assetType:r}}function Le(s,t){for(const e of s){const r=O(e.source,t);if(r)return r}return null}function O(s,{infoFor3D:t},e={}){if(!s)return null;const r=ae(s);if(!r)return null;const{supportedFormats:o,editFormats:n}=t,a=new Array,i=ye(t),u=we(t);let d=!1;for(const g of r){const m=ze(g,o);if(!m)return null;const{assetType:c}=m;if(e.checkForConversionRequired&&(c===i||c===u))return null;n.includes(c)&&(d=!0),a.push(m)}return d?a:null}function ze(s,t){const e=ie(s,t);return e?{asset:s,assetType:e}:null}async function U(s,t,e){return q(s.map(r=>He(r,e)),t,e)}async function q(s,t,e){const r=y(M.uploadAssetBlobs,e==null?void 0:e.onProgress,"uploadAssetBlobs"),o=await Je(s,t,{...e,onProgress:r.makeOnProgress("prepareAssetItems")});l(e);const n=o.map(({item:i})=>i),{uploadResults:a}=await We(n,t,{...e,onProgress:r.makeOnProgress("uploadAssetItems")});return l(e),s.map((i,u)=>Ke(o[u],a[u],t))}async function He(s,t){const{asset:e,assetType:r}=s;if(e instanceof File)return{blob:e,assetName:e.name,assetType:r};const o=await e.toBlob(t);return l(t),{blob:o,assetName:e.assetName,assetType:r}}async function Ge(s,t,e){const{blob:r,assetType:o,assetName:n}=s;let a=null;try{const i=await _e({data:r,name:n},t.url,e);l(e),a={assetType:o,assetUploadId:i.itemID}}catch(i){ee(i),es().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!a){const i=await se(r);if(l(e),!i.isBase64)throw new ge;a={assetType:o,assetData:i.data}}if(!a)throw new he;return{item:a,assetName:n}}function Je(s,t,e){const r=y(s.length,e==null?void 0:e.onProgress,"prepareAssetItems");return Promise.all(s.map(async(o,n)=>{const a=Ge(await o,t,{...e,onProgress:r.makeOnProgress(n)});return l(e),a}))}async function We(s,t,e){const r=I(e==null?void 0:e.onProgress);try{const o=await f(h(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(l(e),o.data.uploadResults.length!==s.length)throw new ue(s.length,o.data.uploadResults.length);return o.data}finally{r.remove()}}function Ke(s,t,e){const{success:r}=t;if(!r){const{error:d}=t;throw new pe(s.assetName,d)}const{assetHash:o}=t,{assetName:n,item:{assetType:a}}=s,{infoFor3D:{supportedFormats:i}}=e,u=Pe(a,i);if(!u)throw new k(a);return new R(n,u,[new _(`${e.parsedUrl.path}/assets/${o}`,o)])}async function Ze({assets:s},t,e){var n;const r=s.map(({assetName:a,parts:i})=>({assetName:a,assetHash:i[0].partHash}));let o;try{const a=h(t.parsedUrl.path,"convert3D"),i=(n=t.capabilities)==null?void 0:n.operations.supportsAsyncConvert3D;o=(await(i?Ye:Ve)(a,{query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:e,async:i},responseType:"json",timeout:0})).data}catch{throw new me}return Qe(t,o)}function Qe(s,t){const e={source:{type:"service",assets:t.assets.map(r=>{const o=be(r.contentType,s.infoFor3D.supportedFormats);if(!o)throw new k(o);return new R(r.assetName,r.contentType,[new _(r.assetURL,r.assetHash)])})},origin:void 0,transform:void 0};if(v("enable-feature:georeferenced-uploads")&&t.transform){if(e.transform=ve(t.transform),t.spatialReference){const r=Q.fromJSON(t.spatialReference);e.origin=Ae(t.transform,r)}}else e.transform=fe(s.spatialReference);return e}function Ve(s,t){return f(s,t)}async function Ye(s,t){const e=(await f(s,t)).data.statusUrl;for(;;){const r=(await f(e,{query:{f:"json"},responseType:"json"})).data;switch(r.status){case"Completed":return f(r.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(r.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await V(ss)}}function Xe(s){return!!s.infoFor3D&&!!s.url}function $({infoFor3D:s}){const t=Te(s);if(!t)throw new de;return t}function es(){return te.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=A(1e3);export{ws as uploadAssets};
