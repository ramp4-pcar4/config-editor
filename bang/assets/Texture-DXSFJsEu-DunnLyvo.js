import{a5 as W,c as m,dP as V,R as k,a8 as C}from"./index-Cd7FS_80.js";import{o as $}from"./signal-DxzURL18-Dd2UKOJd.js";import{P as f,U as u,F as w,M as d,G as z,V as O,t as T,B as n,H as M,S as K}from"./enums-DBi1-Mm2-CUS1pvQe.js";import{a as Y}from"./getDataTypeBytes-HSdrWtlL-ClHsCcSN.js";const q=()=>C.getLogger("esri.views.webgl.checkWebGLError");function j(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const L=!!W("enable-feature:webgl-debug");function X(){return L}function he(){return L}function b(t){if(X()){const e=t.getError();if(e){const r=j(t,e),i=new Error().stack;q().error(new m("webgl-error","WebGL error occurred",{message:r,stack:i}))}}}var U;(function(t){t[t.Texture=0]="Texture",t[t.RenderBuffer=1]="RenderBuffer"})(U||(U={}));function J(t){const e=t.gl;switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case e.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case e.INVALID_OPERATION:return"The specified command is not allowed for the current state";case e.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case e.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case e.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function pe(t,e,r,i,s=0){var l;const c=t.gl;t.bindBuffer(r);for(const o of i){const a=e.get(o.name);if(a==null){console.warn(`There is no location for vertex attribute '${o.name}' defined.`);continue}const p=s*o.stride;if(o.count<=4)c.vertexAttribPointer(a,o.count,o.type,o.normalized,o.stride,o.offset+p),c.enableVertexAttribArray(a),o.divisor>0&&t.gl.vertexAttribDivisor(a,o.divisor);else if(o.count===9)for(let h=0;h<3;h++)c.vertexAttribPointer(a+h,3,o.type,o.normalized,o.stride,o.offset+12*h+p),c.enableVertexAttribArray(a+h),o.divisor>0&&t.gl.vertexAttribDivisor(a+h,o.divisor);else if(o.count===16)for(let h=0;h<4;h++)c.vertexAttribPointer(a+h,4,o.type,o.normalized,o.stride,o.offset+16*h+p),c.enableVertexAttribArray(a+h),o.divisor>0&&((l=t.gl)==null||l.vertexAttribDivisor(a+h,o.divisor));else console.error("Unsupported vertex attribute element count: "+o.count);if(X()){const h=J(t),_=Y(o.type),E=o.offset,g=Math.round(_/E)!==_/E?`. Offset not a multiple of stride. DataType requires ${_} bytes, but descriptor has an offset of ${E}`:"";h&&console.error(`Unable to bind vertex attribute "${o.name}" with baseInstanceOffset ${p}${g}:`,h,o)}}}function ue(t,e,r,i){var c,l,o;const s=t.gl;t.bindBuffer(r);for(const a of i){const p=e.get(a.name);if(a.count<=4)s.disableVertexAttribArray(p),a.divisor&&a.divisor>0&&((c=t.gl)==null||c.vertexAttribDivisor(p,0));else if(a.count===9)for(let h=0;h<3;h++)s.disableVertexAttribArray(p+h),a.divisor&&a.divisor>0&&((l=t.gl)==null||l.vertexAttribDivisor(p+h,0));else if(a.count===16)for(let h=0;h<4;h++)s.disableVertexAttribArray(p+h),a.divisor&&a.divisor>0&&((o=t.gl)==null||o.vertexAttribDivisor(p+h,0));else console.error("Unsupported vertex attribute element count: "+a.count)}t.unbindBuffer(K.ARRAY_BUFFER)}function Q(t){switch(t){case u.ALPHA:case u.LUMINANCE:case u.RED:case u.RED_INTEGER:case n.R8:case n.R8I:case n.R8UI:case n.R8_SNORM:case M.STENCIL_INDEX8:return 1;case u.LUMINANCE_ALPHA:case u.RG:case u.RG_INTEGER:case n.RGBA4:case n.R16F:case n.R16I:case n.R16UI:case n.RG8:case n.RG8I:case n.RG8UI:case n.RG8_SNORM:case n.RGB565:case n.RGB5_A1:case M.DEPTH_COMPONENT16:return 2;case u.DEPTH_COMPONENT:case u.RGB:case u.RGB_INTEGER:case n.RGB8:case n.RGB8I:case n.RGB8UI:case n.RGB8_SNORM:case n.SRGB8:case M.DEPTH_COMPONENT24:return 3;case u.DEPTH_STENCIL:case u.DEPTH24_STENCIL8:case u.RGBA:case u.RGBA_INTEGER:case n.RGBA8:case n.R32F:case n.R11F_G11F_B10F:case n.RG16F:case n.R32I:case n.R32UI:case n.RG16I:case n.RG16UI:case n.RGBA8I:case n.RGBA8UI:case n.RGBA8_SNORM:case n.SRGB8_ALPHA8:case n.RGB9_E5:case n.RGB10_A2UI:case n.RGB10_A2:case M.DEPTH_STENCIL:case M.DEPTH_COMPONENT32F:case M.DEPTH24_STENCIL8:return 4;case M.DEPTH32F_STENCIL8:return 5;case n.RGB16F:case n.RGB16I:case n.RGB16UI:return 6;case n.RG32F:case n.RG32I:case n.RG32UI:case n.RGBA16F:case n.RGBA16I:case n.RGBA16UI:return 8;case n.RGB32F:case n.RGB32I:case n.RGB32UI:return 12;case n.RGBA32F:case n.RGBA32I:case n.RGBA32UI:return 16;case T.COMPRESSED_RGB_S3TC_DXT1_EXT:case T.COMPRESSED_RGBA_S3TC_DXT1_EXT:return .5;case T.COMPRESSED_RGBA_S3TC_DXT3_EXT:case T.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case T.COMPRESSED_R11_EAC:case T.COMPRESSED_SIGNED_R11_EAC:case T.COMPRESSED_RGB8_ETC2:case T.COMPRESSED_SRGB8_ETC2:case T.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case T.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return .5;case T.COMPRESSED_RG11_EAC:case T.COMPRESSED_SIGNED_RG11_EAC:case T.COMPRESSED_RGBA8_ETC2_EAC:case T.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}let Z=class{constructor(t=0,e=t){this.width=t,this.height=e,this.target=f.TEXTURE_2D,this.pixelFormat=u.RGBA,this.dataType=w.UNSIGNED_BYTE,this.samplingMode=d.LINEAR,this.wrapMode=z.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.shouldCompress=!1,this.depth=1,this.isImmutable=!1}};function ee(t){return t.width<=0||t.height<=0?0:Math.round(t.width*t.height*t.depth*(t.hasMipmap?4/3:1)*(t.internalFormat==null?4:Q(t.internalFormat))*(t.target===f.TEXTURE_CUBE_MAP?6:1))}const te=()=>C.getLogger("esri/views/webgl/textureUtils");function N(t){(t.width!=null&&t.width<0||t.height!=null&&t.height<0||t.depth!=null&&t.depth<0)&&te().error("Negative dimension parameters are not allowed!")}function re(t){return t in n}function ie(t){return t in T}function D(t){return t!=null&&"type"in t&&t.type==="compressed"}function se(t){return t!=null&&"byteLength"in t}function B(t){return t!=null&&!D(t)&&!se(t)}function S(t){return t===f.TEXTURE_3D||t===f.TEXTURE_2D_ARRAY}function y(t,e,r,i=1){let s=Math.max(e,r);return t===f.TEXTURE_3D&&(s=Math.max(s,i)),Math.floor(Math.log2(s))+1}function P(t){if(t.internalFormat!=null)return t.internalFormat===u.DEPTH_STENCIL?u.DEPTH24_STENCIL8:t.internalFormat;switch(t.dataType){case w.FLOAT:switch(t.pixelFormat){case u.RGBA:return n.RGBA32F;case u.RGB:return n.RGB32F;default:throw new m("Unable to derive format")}case w.UNSIGNED_BYTE:switch(t.pixelFormat){case u.RGBA:return n.RGBA8;case u.RGB:return n.RGB8}}return t.internalFormat=t.pixelFormat===u.DEPTH_STENCIL?u.DEPTH24_STENCIL8:t.pixelFormat}function ae(t){let e="width"in t?t.width:t.codedWidth,r="height"in t?t.height:t.codedHeight;return t instanceof HTMLVideoElement&&(e=t.videoWidth,r=t.videoHeight),{width:e,height:r,depth:1}}class G extends Z{constructor(e,r){switch(super(),this.context=e,Object.assign(this,r),this.internalFormat){case n.R16F:case n.R16I:case n.R16UI:case n.R32F:case n.R32I:case n.R32UI:case n.R8_SNORM:case n.R8:case n.R8I:case n.R8UI:this.pixelFormat=u.RED}}static validate(e,r){return new G(e,r)}}const I=()=>C.getLogger("esri/views/webgl/Texture");let v=class R{constructor(e,r=null,i=null){if(this.type=U.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,this._compressionAbortController=$(null),"context"in e)this._descriptor=e,i=r;else{const s=G.validate(e,r);if(!s)throw new m("Texture descriptor invalid");this._descriptor=s}this._descriptor.target===f.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return ee(this._descriptor)}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}get isCompressing(){return this._compressionAbortController.value!==null}dispose(){this.abortCompression(),this._glName&&this._descriptor.context.instanceCounter.decrement(O.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,r){const i=this._descriptor;if(i.width!==e||i.height!==r){if(this._wasImmutablyAllocated)throw new m("Immutable textures can't be resized!");i.width=e,i.height=r,this._descriptor.target===f.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}enableCompression(e){this._descriptor.shouldCompress=e}setData(e){this.abortCompression(),!D(e)&&this._descriptor.internalFormat&&this._descriptor.internalFormat in T&&(this._descriptor.internalFormat=void 0),this._setData(e),!D(e)&&this._descriptor.shouldCompress&&this._compressOnWorker(e)}updateData(e,r,i,s,c,l,o=0){l||I().error("An attempt to use uninitialized data!"),this._glName||I().error("An attempt to update uninitialized texture!");const a=this._descriptor;a.internalFormat=P(a);const{context:p,pixelFormat:h,dataType:_,target:E,isImmutable:g}=a;if(g&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");const x=p.bindTexture(this,R.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||i<0||r+s>a.width||i+c>a.height)&&I().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:A}=p;o&&(s&&c||I().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"),A.pixelStorei(A.UNPACK_SKIP_ROWS,o)),B(l)?A.texSubImage2D(E,e,r,i,s,c,h,_,l):D(l)?A.compressedTexSubImage2D(E,e,r,i,s,c,a.internalFormat,l.levels[e]):A.texSubImage2D(E,e,r,i,s,c,h,_,l),o&&A.pixelStorei(A.UNPACK_SKIP_ROWS,0),p.bindTexture(x,R.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,r,i,s,c,l,o,a){a||I().error("An attempt to use uninitialized data!"),this._glName||I().error("An attempt to update an uninitialized texture!");const p=this._descriptor;p.internalFormat=P(p);const{context:h,pixelFormat:_,dataType:E,isImmutable:g,target:x}=p;if(g&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");S(x)||I().warn("Attempting to set 3D texture data on a non-3D texture");const A=h.bindTexture(this,R.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(R.TEXTURE_UNIT_FOR_UPDATES),(r<0||i<0||s<0||r+c>p.width||i+l>p.height||s+o>p.depth)&&I().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:F}=h;if(D(a))a=a.levels[e],F.compressedTexSubImage3D(x,e,r,i,s,c,l,o,p.internalFormat,a);else{const H=a;F.texSubImage3D(x,e,r,i,s,c,l,o,_,E,H)}h.bindTexture(A,R.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(e.width===0||e.height===0)return;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,N(e)}e.samplingMode===d.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=d.LINEAR_MIPMAP_NEAREST):e.samplingMode===d.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=d.NEAREST_MIPMAP_NEAREST);const r=this._descriptor.context.bindTexture(this,R.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(R.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(e.target),this._descriptor.context.bindTexture(r,R.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,N(e)}e.samplingMode===d.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=d.LINEAR):e.samplingMode===d.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=d.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,N(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1)}abortCompression(){this.isCompressing&&(this._compressionAbortController.value=V(this._compressionAbortController.value))}_setData(e,r){var a;const i=this._descriptor,s=(a=i.context)==null?void 0:a.gl;if(!s)return;b(s),this._glName||(this._glName=s.createTexture(),this._glName&&i.context.instanceCounter.increment(O.Texture,this)),N(i);const c=i.context.bindTexture(this,R.TEXTURE_UNIT_FOR_UPDATES);i.context.setActiveTexture(R.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),b(s);const l=r??i.target,o=S(l);if(B(e))this._setDataFromTexImageSource(e,l);else{const{width:p,height:h,depth:_}=i;if(p==null||h==null)throw new m("Width and height must be specified!");if(o&&_==null)throw new m("Depth must be specified!");if(i.internalFormat=P(i),i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(l,i.internalFormat,i.hasMipmap,p,h,_),D(e)){if(!ie(i.internalFormat))throw new m("Attempting to use compressed data with an uncompressed format!");this._setDataFromCompressedSource(e,i.internalFormat,l)}else this._texImage(l,0,i.internalFormat,p,h,_,e),b(s),i.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),b(s),i.context.bindTexture(c,R.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(e=null){for(let r=f.TEXTURE_CUBE_MAP_POSITIVE_X;r<=f.TEXTURE_CUBE_MAP_NEGATIVE_Z;r++)this._setData(e,r)}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:r,flipped:i,preMultiplyAlpha:s}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,r),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s?1:0)}_setDataFromTexImageSource(e,r){const{gl:i}=this._descriptor.context,s=this._descriptor;s.internalFormat=P(s);const c=S(r),{width:l,height:o,depth:a}=ae(e);s.width&&s.height,s.width||(s.width=l),s.height||(s.height=o),c&&s.depth,c&&(s.depth=a),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(r,s.internalFormat,s.hasMipmap,l,o,a),this._texImage(r,0,s.internalFormat,l,o,a,e),b(i),s.hasMipmap&&(this.generateMipmap(),b(i))}_setDataFromCompressedSource(e,r,i){const s=this._descriptor,{width:c,height:l,depth:o}=s,a=e.levels,p=y(i,c,l,o),h=Math.min(p,a.length)-1;this._descriptor.context.gl.texParameteri(s.target,s.context.gl.TEXTURE_MAX_LEVEL,h),this._forEachMipmapLevel((_,E,g,x)=>{const A=a[Math.min(_,a.length-1)];this._compressedTexImage(i,_,r,E,g,x,A)},h)}_texStorage(e,r,i,s,c,l){const{gl:o}=this._descriptor.context;if(!re(r))throw new m("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const a=i?y(e,s,c,l):1;if(S(e)){if(l==null)throw new m("Missing depth dimension for 3D texture upload");o.texStorage3D(e,a,r,s,c,l)}else o.texStorage2D(e,a,r,s,c);this._wasImmutablyAllocated=!0}_texImage(e,r,i,s,c,l,o){const a=this._descriptor.context.gl,p=S(e),{isImmutable:h,pixelFormat:_,dataType:E}=this._descriptor;if(h){if(o!=null){const g=o;if(p){if(l==null)throw new m("Missing depth dimension for 3D texture upload");a.texSubImage3D(e,r,0,0,0,s,c,l,_,E,g)}else a.texSubImage2D(e,r,0,0,s,c,_,E,g)}}else{const g=o;if(p){if(l==null)throw new m("Missing depth dimension for 3D texture upload");a.texImage3D(e,r,i,s,c,l,0,_,E,g)}else a.texImage2D(e,r,i,s,c,0,_,E,g)}}_compressedTexImage(e,r,i,s,c,l,o){const a=this._descriptor.context.gl,p=S(e);if(this._descriptor.isImmutable){if(o!=null)if(p){if(l==null)throw new m("Missing depth dimension for 3D texture upload");a.compressedTexSubImage3D(e,r,0,0,0,s,c,l,i,o)}else a.compressedTexSubImage2D(e,r,0,0,s,c,i,o)}else if(p){if(l==null)throw new m("Missing depth dimension for 3D texture upload");a.compressedTexImage3D(e,r,i,s,c,l,0,o)}else a.compressedTexImage2D(e,r,i,s,c,0,o)}async _compressOnWorker(e){var s,c;if(!R.compressionWorkerHandle||!R.compressionWorkerHandle.isCompressible(e))return;const r=(s=this._descriptor.context)==null?void 0:s.gl.getExtension("WEBGL_compressed_texture_etc"),i=(c=this._descriptor.context)==null?void 0:c.gl.getExtension("WEBGL_compressed_texture_s3tc");if(r||i){const l=new AbortController;this._compressionAbortController.value=l;const o={data:await createImageBitmap(e),flipped:this.descriptor.flipped,width:e.width,height:e.height,hasMipmap:this._descriptor.hasMipmap,hasETC:!!r,hasS3TC:!!i};R.compressionWorkerHandle.invoke(o,this._compressionAbortController.value.signal).then(a=>{a&&this.isCompressing&&this.glName&&(this._descriptor.internalFormat=a.internalFormat,this._setData(a.compressedTexture)),l===this._compressionAbortController.value&&(this._compressionAbortController.value=null)}).catch(a=>{k(a)||l!==this._compressionAbortController.value||(this._compressionAbortController.value=null)})}}_forEachMipmapLevel(e,r=1/0){let{width:i,height:s,depth:c,hasMipmap:l,target:o}=this._descriptor;const a=o===f.TEXTURE_3D;if(i==null||s==null||a&&c==null)throw new m("Missing texture dimensions for mipmap calculation");for(let p=0;e(p,i,s,c),l&&(i!==1||s!==1||a&&c!==1)&&!(p>=r);++p)i=Math.max(1,i>>1),s=Math.max(1,s>>1),a&&(c=Math.max(1,c>>1))}_applySamplingMode(){var c;const e=this._descriptor,r=(c=e.context)==null?void 0:c.gl;let i=e.samplingMode,s=e.samplingMode;i===d.LINEAR_MIPMAP_NEAREST||i===d.LINEAR_MIPMAP_LINEAR?(i=d.LINEAR,e.hasMipmap||(s=d.LINEAR)):i!==d.NEAREST_MIPMAP_NEAREST&&i!==d.NEAREST_MIPMAP_LINEAR||(i=d.NEAREST,e.hasMipmap||(s=d.NEAREST)),r.texParameteri(e.target,r.TEXTURE_MAG_FILTER,i),r.texParameteri(e.target,r.TEXTURE_MIN_FILTER,s)}_applyWrapMode(){var i;const e=this._descriptor,r=(i=e.context)==null?void 0:i.gl;typeof e.wrapMode=="number"?(r.texParameteri(e.target,r.TEXTURE_WRAP_S,e.wrapMode),r.texParameteri(e.target,r.TEXTURE_WRAP_T,e.wrapMode)):(r.texParameteri(e.target,r.TEXTURE_WRAP_S,e.wrapMode.s),r.texParameteri(e.target,r.TEXTURE_WRAP_T,e.wrapMode.t))}_applyAnisotropicFilteringParameters(){const e=this._descriptor,r=e.context.capabilities.textureFilterAnisotropic;r&&e.context.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};v.TEXTURE_UNIT_FOR_UPDATES=0,v.compressionWorkerHandle=null;export{X as F,Z as H,J as L,U as N,v as O,G as U,Q as X,b,he as e,ue as r,pe as t};
