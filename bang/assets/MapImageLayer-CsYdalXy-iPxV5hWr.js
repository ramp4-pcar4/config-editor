const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./mapImageLayerUtils-DsXTgn4O-DOCO532m.js","./utils-DyDDSDvN-B7c8S3ZN.js","./index-JysQxb7m.js","./index-BQSptJp9.css","./originUtils-BLsWtgV9-CGkwp8uO.js","./multiOriginJSONSupportUtils-DGETddQl-BrWaY9_8.js","./PortalItem-BP-IQXnZ-q--yZGhn.js","./jsonContext-C9WBVzLb-DK5wBZQ7.js","./portalItemUtils-BfWDJg-S-Da4taYqM.js","./projectionUtils-B-CplN3q-DYZZu_-u.js","./saveUtils-W0sSii7v-DE9zJId-.js"])))=>i.map(i=>d[i]);
import{bv as E,_ as T,t as P,bA as x,bB as f,by as A,N as v,o as L,h as I,aM as M,v as o,S as p,w as F,F as R,bh as N,n as V}from"./index-JysQxb7m.js";import{d as j}from"./loadAll-DQWsVoX1-c-a3zMTV.js";import{w as q}from"./MultiOriginJSONSupport-BqiFJbbt-8VO_HRla.js";import{a as J}from"./scaleUtils-Br-smv3A-Bls3RUkB.js";import{e as U}from"./Layer-DvVVmz9x-CQh7OSfC.js";import{n as k}from"./APIKeyMixin-BNzYY3QS-ZHQs1f_q.js";import{$ as W,k as H,o as z}from"./SublayersOwner-KP6FVHkR-3Y29MrT-.js";import{a as B}from"./ArcGISService-B6M5rzsr-DDJduLnu.js";import{u as C}from"./BlendLayer-DjW_5k0v-HONeExWo.js";import{i as D}from"./CustomParametersMixin-CSMgHDaw-AVW8I1f-.js";import{u as G,i as Z}from"./OperationalLayer-CbXUnTH0-Bn7-Pvcl.js";import{x as K}from"./PortalLayer-B34ZUA2x-7GY-EiB1.js";import{T as Y}from"./RefreshableLayer-Qpvyi8qY-D5mInTca.js";import{S as Q}from"./ScaleRangeLayer-x42fwED3-DuReLbie.js";import{x as X}from"./TemporalLayer-lQRje9wB-jxHnXbN9.js";import{s as $}from"./ExportImageParameters-CC1oba-O-CQeQQ5lI.js";import{i as tt}from"./imageBitmapUtils-wCApjb1B-COy1LW-1.js";import{f as w}from"./sublayerUtils-DUalPlkE-C_66fXdS.js";import{a as rt}from"./versionUtils-BwTR8Ufq-eUvxHOBL.js";import{r as et}from"./ElevationInfo-DE5to86a-D9mR-AIA.js";import{l as it}from"./TimeExtent-Cf2Pienb-DstDmVgA.js";import{C as _}from"./timeZoneUtils-d5p0Jda1-RjSvF6yi.js";import{E as g}from"./interfaces-Cwm0pihk-Ptzy6gTd.js";import"./asyncUtils-BPUlNCrX-BS2LVKAY.js";import"./Version-CnwD6MZa-BFgcISMZ.js";import"./portalItemUtils-BfWDJg-S-Da4taYqM.js";import"./projectionUtils-B-CplN3q-DYZZu_-u.js";import"./CollectionFlattener-DyEG1Q6J-Bta-Vg1j.js";import"./QueryTask-DxRoWbf6-BzULbb-M.js";import"./infoFor3D-BeWnZejW-CnXQECJx.js";import"./Query-n1aoaaFC-BH8Wj8dd.js";import"./Field-BIQ-quF4-CELMLVTM.js";import"./fieldType-PhcL4ff8-Dx3imvn-.js";import"./utils-BO8hgPs3-ESkgk50Y.js";import"./executeForIds-CRDS8hwo-DOO3KwEs.js";import"./query-COAsogFA-B_7NHWKZ.js";import"./normalizeUtils-u00NGW3M-DJIcJS3H.js";import"./normalizeUtilsCommon-ClagynAA-DgLRsjpR.js";import"./utils-DpLVEUvg-Cr3RAbYo.js";import"./pbfQueryUtils-aBcHX3TJ-XGWHC9a8.js";import"./pbf-hoLeQyp2-Bcnds-5q.js";import"./memoryEstimations-DeWfxwaV-BnbU1TaS.js";import"./OptimizedGeometry-pzfNw1AT--wT_d_bU.js";import"./OptimizedFeature-mIz_HhJg-lEv_dFEg.js";import"./OptimizedFeatureSet-Dz5hF8Qm-B1brSkRC.js";import"./queryZScale-CwrUzBjP-D1J1AAas.js";import"./executeQueryPBF-BbqQX_MH-BFTgKH5Z.js";import"./featureConversionUtils-Bjjlcfdo-BG5IulME.js";import"./FeatureSet-BVGGhhH9-CR-T7cae.js";import"./executeQueryJSON-D8fHgTZN-CLpU1ZIi.js";import"./OrderedLayer-BD-wnvgD-BsS6j8Wx.js";import"./OrderByInfo-SNGyPlhJ-DczGcRW9.js";import"./labelingInfo-DuLk-IW_-LIVRcaYS.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./SimpleRenderer-C1YRhRzu-DCnnCgPv.js";import"./commonProperties-CJLeiNuA-BW_T4GrI.js";import"./colorRamps-trM-CPFS-CXhs1IBF.js";import"./ColorStop-CL7v3R-A-D498Ru50.js";import"./visualVariableUtils-BTS148WR-Dyd05Xj4.js";import"./lengthUtils-C61nRlXw-CbFzxkTc.js";import"./UniqueValueRenderer-CLXHFtg9-CCNP90Rp.js";import"./diffUtils-BxG8DCnW-CSbmQiv7.js";import"./RendererLegendOptions-Bil_IDab-ch3YvyVz.js";import"./styleUtils-DBPDLVBX-CtpDyPkG.js";import"./RelationshipQuery-CaEbQySU-CRpPyD0p.js";import"./NormalizationBinParametersMixin-70JA0FRq-OCMdDuvi.js";import"./labelUtils-Oapo6DRu-DqdQqyBU.js";import"./FeatureType-DdIqcZ2U-CCuAxXLI.js";import"./FeatureTemplate-CW5LOQ_p-CqV6ANK8.js";import"./FieldsIndex-Bt0Y8aWr-xBUfP_A6.js";import"./UnknownTimeZone-DxjyzFvs-ChSwQqMk.js";import"./LayerFloorInfo-CkeH-P4_-CAgbKHw8.js";import"./Relationship-B6fQjk3--8Y4Vfg1q.js";import"./serviceCapabilitiesUtils-BerH-9mt-B9m2UpWL.js";import"./typeUtils-CB2EGBWO-DQBesG4R.js";import"./ClassBreaksRenderer-Bq2XGpfI-DBBh1Rti.js";import"./LRUCache-DPWdPNTF-BhV6gJVw.js";import"./MemCache-qDGoejB7-Bz_y0gIH.js";import"./DictionaryScriptEvaluator-DW5hOK9A-Bto86CIl.js";import"./ArcadeExpression-XjY3x7KV-Co23DuzJ.js";import"./TimeOnly-CGkId3bj-DEVsu_Sy.js";import"./enum-g1DWyQyu-Cl9-UFcN.js";import"./utils-BfXZnjCE-CGCN-wqd.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./heatmapUtils-DRTN9U3a-z76Jc4vk.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./popupUtils-B99PyAFi-Dj4s0FxX.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-Bu_6JrpW.js";import"./parser-CWccHtwJ-ClH7aFqe.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-d4wDSfI3.js";import"./PortalItem-BP-IQXnZ-q--yZGhn.js";import"./TimeInfo-COHxjenm-B3WMG2CW.js";import"./floorFilterUtils-4r-vVdzs-u-jw2p7F.js";let i=class extends C(X(Q(W(H(B(G(K(q(Y(k(D(U)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new $({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new et({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=E(async(e,m,r)=>{const{save:s,saveAs:a}=await T(()=>import("./mapImageLayerUtils-DsXTgn4O-DOCO532m.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10]),import.meta.url);switch(e){case g.SAVE:return s(this,m);case g.SAVE_AS:return a(this,r,m)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(P).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,e){const m=e.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,m,r){var y,b,S;if(!this.loaded||!t)return;const s=t.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let a=!1;const h=x(r.origin);let c;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((S=(b=this.capabilities)==null?void 0:b.exportMap)!=null&&S.supportsDynamicLayers)){if(h===f.PORTAL_ITEM){const n=this.createSublayersForOrigin("service").sublayers;a=w(s,n,f.SERVICE)}else if(h>f.PORTAL_ITEM){const n=this.createSublayersForOrigin("portal-item");a=w(s,n.sublayers,x(n.origin)),c=n.originWithPartialOverrides}}const u=[],d={writeSublayerStructure:a,...r,minimumWritableOrigin:c};let l=a||this.hasVisibleLayersForOrigin(h);s.forEach(n=>{const O=n.write({},d);u.push(O),l=l||n.originOf("visible")==="user"}),u.some(n=>Object.keys(n).length>1)&&(e.layers=u),l&&(e.visibleLayers=s.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(t,e,m,r){const s=(r==null?void 0:r.pixelRatio)||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(r==null?void 0:r.floors)??null,this._exportImageParameters.scale=J({extent:t,width:e})*s;const a=this._exportImageParameters.toJSON(),h=!(r!=null&&r.rotation)||this.version<10.3?{}:{rotation:-r.rotation},c=t==null?void 0:t.spatialReference,u=A(c);a.dpi*=s;const d={};if(r!=null&&r.timeExtent){const{start:l,end:y}=r.timeExtent.toJSON();d.time=l&&y&&l===y?""+l:`${l??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:t?t.xmin+","+t.ymin+","+t.xmax+","+t.ymax:void 0,bboxSR:u,imageSR:u,size:e+","+m,...a,...h,...d}}async fetchImage(t,e,m,r){const{data:s}=await this._fetchImage("image",t,e,m,r);return s}async fetchImageBitmap(t,e,m,r){const{data:s,url:a}=await this._fetchImage("blob",t,e,m,r);return tt(s,a,r==null?void 0:r.signal)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await v(this.url,e),{extent:r,fullExtent:s,timeExtent:a}=m,h=r||s;return{fullExtent:h&&L.fromJSON(h),timeExtent:a&&it.fromJSON({start:a[0],end:a[1]})}}loadAll(){return j(this,t=>{t(this.allSublayers),t(this.subtables)})}async save(t){return this._debouncedSaveOperations(g.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(g.SAVE_AS,e,t)}serviceSupportsSpatialReference(t){return rt(this,t)}async _fetchImage(t,e,m,r,s){var c,u,d;const a={responseType:t,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,m,r,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=a.query)==null?void 0:c.dynamicLayers)!=null&&!((d=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&d.supportsDynamicLayers))throw new I("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:l}=await v(h,a);return{data:l,url:h}}catch(l){throw M(l)?l:new I("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:m}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){var e;return!(t==null||!((e=this.sublayersSourceJSON[t])!=null&&e.visibleLayers))}};o([p(_("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([p()],i.prototype,"dpi",void 0),o([p()],i.prototype,"elevationInfo",void 0),o([p()],i.prototype,"gdbVersion",void 0),o([p()],i.prototype,"imageFormat",void 0),o([F("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([p()],i.prototype,"imageTransparency",void 0),o([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([p(_("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([p()],i.prototype,"sourceJSON",void 0),o([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([R("sublayers",{layers:{type:[z]},visibleLayers:{type:[N]}})],i.prototype,"writeSublayers",null),o([p({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],i.prototype,"listMode",void 0),o([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([p(Z)],i.prototype,"url",void 0),i=o([V("esri.layers.MapImageLayer")],i);const Zr=i;export{Zr as default};
