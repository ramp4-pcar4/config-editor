import{jh as h,ji as l,i$ as p,jj as c,an as o}from"./index-aQr1pzMk.js";import{n as e,c as m,i as u}from"./memoryEstimations-DeWfxwaV-BEOBMvAl.js";import"./Field-BIQ-quF4-BtlvGEij.js";function b(){return o("curve-densification-coarse-segments")}function f(){return o("curve-densification-max-segments")}function d(){return o("curve-densification-min-segments")}function v(){return o("curve-densification-pixel-deviation")}class k{constructor(i,s,r){this.uid=i,this.geometry=s,this.attributes=r,this.visible=!0,this.objectId=null,this.centroid=null}}function j(t){return t.geometry!=null}class Z{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function $(t){var i;if(t==null)return 0;switch(t.type){case"point":return e+10+8+24;case"polyline":case"polygon":{let s=0;const r=2+(t.hasZ?1:0)+(t.hasM?1:0),n=t.type==="polyline"?t.paths:t.rings;if((i=t.type==="polyline"?t.curvePaths:t.curveRings)!=null&&i.length){const a=3*f()*128;s=8*a*r+128*a+32*(n.length+1)}else s=u(n);return e+64+s+34}case"multipoint":{const s=u(t.points);return e+s+64+34+32}case"extent":return e+10+64+34;case"mesh":{const s=t.vertexAttributes;return e+m(s.position,s.normal,s.uv,s.tangent)}default:return e}}function z(t,i){switch(h(i),t.type==="mesh"&&(t=t.extent),t.type){case"point":i[0]=i[3]=t.x,i[1]=i[4]=t.y,t.hasZ&&(i[2]=i[5]=t.z);break;case"polyline":for(let s=0;s<t.paths.length;s++)l(i,t.paths[s],!!t.hasZ);break;case"polygon":for(let s=0;s<t.rings.length;s++)l(i,t.rings[s],!!t.hasZ);break;case"multipoint":l(i,t.points,!!t.hasZ);break;case"extent":i[0]=t.xmin,i[1]=t.ymin,i[3]=t.xmax,i[4]=t.ymax,t.zmin!=null&&(i[2]=t.zmin),t.zmax!=null&&(i[5]=t.zmax)}return i}function I(t,i){switch(p(i),t.type==="mesh"&&(t=t.extent),t.type){case"point":i[0]=i[2]=t.x,i[1]=i[3]=t.y;break;case"polyline":for(let s=0;s<t.paths.length;s++)c(i,t.paths[s]);break;case"polygon":for(let s=0;s<t.rings.length;s++)c(i,t.rings[s]);break;case"multipoint":c(i,t.points);break;case"extent":i[0]=t.xmin,i[1]=t.ymin,i[2]=t.xmax,i[3]=t.ymax}}function w(t,i){return t.objectId!=null?t.objectId:t.attributes&&i?t.attributes[i]:null}function F(t,i,s,r){if(i!=null&&i.size&&s!=null&&t)for(const n in t){if(!i.has(n))continue;const a=t[n];typeof a=="string"&&a.length>s&&(r(n),t[n]="")}}export{I,w as Z,j as b,k as d,b as g,f as h,F as j,$ as k,Z as v,v as x,d as y,z};
