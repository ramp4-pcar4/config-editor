import{fS as _,c as E,c3 as Q,iu as D,c4 as v,dN as P,R as Z,a8 as B,cV as G,b as $,eh as R}from"./index-BcWBQvu1.js";import{L as M,s as N,B as z,E as L,z as Y}from"./featureConversionUtils-DRaHTjrY-2OeRDlb0.js";import{K as W,W as J}from"./executeQueryForSnapping-BaQkcS1W-C0cLk2-a.js";import{p as F,h as b}from"./queryUtils-OXllLZed-C4meNqUf.js";import{Y as U}from"./QueryEngine-DEm6IK5j-BWZVoq8B.js";import{_ as V,U as H,Y as K}from"./geojson-v8vpimDG-C_kHLMyr.js";import{f as X,A as ee,d as te}from"./clientSideDefaults-B-KLKMEC-C5LZw_vS.js";import{b as ie,A as w,w as T,a as I,C as k,q as se}from"./sourceUtils-4Pkpu1X1-BbUq0VUs.js";import{o as C}from"./FieldsIndex-Y7EBAYp0-C6we7QC1.js";import{i as re}from"./fieldType-VTpxE-EM-xOb8kqCl.js";import"./OptimizedFeatureSet-D6mgsKNr-7d8j9uMk.js";import"./memoryEstimations-iHVpvWPf-7G5hNXoi.js";import"./OptimizedGeometry-1qDYm3YK-JQGls0Yz.js";import"./PooledRBush-J5-OtqBl-C_QoNDqA.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./timeSupport-_0FhDj9z-BTG-ck9T.js";import"./optimizedFeatureQueryEngineAdapter-Bx4OOJmK-Dw-inioc.js";import"./normalizeUtils-b-vZURob-BKxgSG4k.js";import"./utils-DuaeuwP5-CRf6bB61.js";import"./utils-Jw-4AGsF-BRiKk67F.js";import"./projection-m8vi7Cxv-B8O5gc-_.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./WhereClauseCache-CAR59H4Y-COLXBt6C.js";import"./LRUCache-BLmkvs7b-DmeLH1K1.js";import"./MemCache-BCippCv6-RtDaJMc_.js";import"./WhereClause-nZnXFKnG-ZcdbrnXR.js";import"./TimeOnly-C3SOkmg2-D06pqgVM.js";import"./QueryEngineCapabilities-C8pazosU-DZTubngj.js";import"./TimeExtent-gZaEUVeW-BAp4H8RE.js";import"./quantizationUtils-Cndke4AR-CKofkCo2.js";import"./utils-BrRx2KpZ-DmGMX7XE.js";import"./heatmapUtils--OU2Fakh-DNYg4DKR.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./utils-BG7WTOnW-BPIqgwG-.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-B_JhQhkc.js";import"./intl-DLmy-Li5-CMNporLm.js";import"./timeZoneUtils-z3WjfjXQ-BSZKhDQq.js";import"./ClassBreaksDefinition-B_vYk3bu-r56SJ-2U.js";import"./SnappingCandidate-DJDyIbpo-CuetCfU1.js";import"./FixedIntervalBinParameters-aoOPIkh7-CXZgcmA3.js";import"./NormalizationBinParametersMixin-ZkplD1Sk-DA21Up6u.js";import"./Scheduler-Br-2v2ys-BKmDlUgJ.js";import"./signal-DxzURL18-HZrG96zK.js";import"./date-Cqvy-TgA-4Z7B9PBN.js";const ne={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:se};class et{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),s=V(i,{geometryType:e.geometryType}),o=e.fields||s.fields||[],p=e.hasZ!=null?e.hasZ:s.hasZ,d=s.geometryType;let c=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const y=e.spatialReference||_;let n=e.timeInfo;o===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});const u=new C(o);let l=u.get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const h={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!re.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==l.name){const g=Q(a);g!==void 0&&(h[a.name]=g)}a.length==null&&(a.length=D(a))}if(n){if(n.startTimeField){const a=u.get(n.startTimeField);a?(n.startTimeField=a.name,a.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const a=u.get(n.endTimeField);a?(n.endTimeField=a.name,a.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const a=u.get(n.trackIdField);a?n.trackIdField=a.name:(n.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const m=d?te(d):void 0,q=u.dateFields.length?{timeZoneIANA:v}:null,f={warnings:r,featureErrors:[],layerDefinition:{...ne,drawingInfo:m??void 0,templates:X(h),extent:void 0,geometryType:d,objectIdField:c,fields:o,hasZ:!!p,timeInfo:n,dateFieldsTimeReference:q}};this._queryEngine=new U({fieldsIndex:C.fromLayerJSON({fields:o,timeInfo:n,dateFieldsTimeReference:q}),geometryType:d,hasM:!1,hasZ:p,objectIdField:c,spatialReference:y,timeInfo:n,featureStore:new W({geometryType:d,hasM:!1,hasZ:p})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=ee(h,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const O=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(O);const{fullExtent:A,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=A,S){const{start:a,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[a,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([ie(t,r),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),J(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=P(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const o=this._normalizeFeatures(s);o&&this._queryEngine.featureStore.addMany(o)},s=>{this._queryEngine.featureStore.clear(),Z(s)||B.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:i}=this._queryEngine,s=H(e,{geometryType:t,hasZ:r,objectIdField:i});if(!G(this._queryEngine.spatialReference,_))for(const o of s)o.geometry!=null&&(o.geometry=M(b(N(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,i=(await $(t??"",{responseType:"json",query:{...r},signal:e})).data;return K(i),i}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:i}=this._queryEngine,s=[];for(const o of e){const p=this._createDefaultAttributes(),d=w(i,p,o.attributes,!0);d?t==null||t.push(d):(this._assignObjectId(p,o.attributes,!0),o.attributes=p,o.objectId=p[r],s.push(o))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:i}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(s,t),r!=null&&r.length&&this._applyUpdateEdits(s,r),i==null?void 0:i.length){for(const d of i)s.deleteResults.push(T(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:p}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:p,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:i,hasM:s,hasZ:o,objectIdField:p,spatialReference:d,featureStore:c,fieldsIndex:y}=this._queryEngine,n=[];for(const u of t){if(u.geometry&&i!==R(u.geometry)){r.push(I("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),h=w(y,l,u.attributes);if(h)r.push(h);else{if(this._assignObjectId(l,u.attributes),u.attributes=l,u.uid!=null){const m=u.attributes[p];e.uidToObjectId[u.uid]=m}if(u.geometry!=null){const m=u.geometry.spatialReference??d;u.geometry=b(k(u.geometry,m),m,d)}n.push(u),r.push(T(u.attributes[p]))}}c.addMany(z([],n,i,o,s,p))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:i,hasZ:s,objectIdField:o,spatialReference:p,featureStore:d,fieldsIndex:c}=this._queryEngine;for(const y of t){const{attributes:n,geometry:u}=y,l=n==null?void 0:n[o];if(l==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(l)){e.push(I(`Feature with object id ${l} missing`));continue}const h=L(d.getFeature(l),r,s,i);if(u!=null){if(r!==R(u)){e.push(I("Incorrect geometry type."));continue}const m=u.spatialReference??p;h.geometry=b(k(u,m),m,p)}if(n){const m=w(c,h.attributes,n);if(m){e.push(m);continue}}d.add(Y(h,r,s,i,o)),e.push(T(l))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(i=Math.max(i,s.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,r=!1){const i=this._queryEngine.objectIdField;e[i]=r&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await F(_,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{et as default};
