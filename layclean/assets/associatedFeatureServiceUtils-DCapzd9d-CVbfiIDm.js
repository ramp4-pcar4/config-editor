import{W as S,c as y,an as T,G as f,b as d,l as b}from"./index-CBMEoBe1.js";import I from"./PortalItem-CJetnHeq-HjUm7mml.js";async function P(e,n){const a=S(e);if(!a)throw new y("invalid-url","Invalid scene service url");const r={...n,sceneServerUrl:a.url.path,layerId:a.sublayer??void 0};if(r.sceneLayerItem??(r.sceneLayerItem=await q(r)),r.sceneLayerItem==null)return g(r.sceneServerUrl.replace("/SceneServer","/FeatureServer"),r);const t=await E(r);if(!(t!=null&&t.url))throw new y("related-service-not-found","Could not find feature service through portal item relationship");r.featureServiceItem=t;const l=await g(t.url,r);return l.portalItem=t,l}async function q(e){const n=(await U(e)).serviceItemId;if(!n)return null;const a=new I({id:n,apiKey:e.apiKey}),r=await x(e);r!=null&&(a.portal=new T({url:r}));try{return await a.load({signal:e.signal})}catch(t){return f(t),null}}async function U(e){if(e.rootDocument)return e.rootDocument;const n={query:{f:"json",...e.customParameters,token:e.apiKey},responseType:"json",signal:e.signal};try{const a=await d(e.sceneServerUrl,n);e.rootDocument=a.data}catch{e.rootDocument={}}return e.rootDocument}async function x(e){var r;const n=(r=b)==null?void 0:r.findServerInfo(e.sceneServerUrl);if(n!=null&&n.owningSystemUrl)return n.owningSystemUrl;const a=e.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const t=(await d(a,{query:{f:"json"},responseType:"json",signal:e.signal})).data.owningSystemUrl;if(t)return t}catch(t){f(t)}return null}async function g(e,n){var v,p,h;const a=S(e);if(!a)throw new y("invalid-feature-service-url","Invalid feature service url");const r=a.url.path,t=n.layerId;if(t==null)return{serverUrl:r};const l=U(n),s=n.featureServiceItem?await n.featureServiceItem.fetchData("json"):null,j=(h=((v=s==null?void 0:s.layers)==null?void 0:v[0])||((p=s==null?void 0:s.tables)==null?void 0:p[0]))==null?void 0:h.customParameters,m=i=>{const A={query:{f:"json",...j},responseType:"json",authMode:i,signal:n.signal};return d(r,A)},D=m("anonymous").catch(()=>m("no-prompt")),[w,c]=await Promise.all([D,l]),u=c==null?void 0:c.layers,o=w.data&&w.data.layers;if(!Array.isArray(o))throw new Error("expected layers array");if(Array.isArray(u)){for(let i=0;i<Math.min(u.length,o.length);i++)if(u[i].id===t)return{serverUrl:r,layerId:o[i].id}}else if(t!=null&&t<o.length)return{serverUrl:r,layerId:o[t].id};throw new Error("could not find matching associated sublayer")}async function E({sceneLayerItem:e,signal:n}){if(!e)return null;try{const a=(await e.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:n})).find(t=>t.type==="Feature Service")||null;if(!a)return null;const r=new I({portal:a.portal,id:a.id});return await r.load(),r}catch(a){return f(a),null}}export{P as D};
