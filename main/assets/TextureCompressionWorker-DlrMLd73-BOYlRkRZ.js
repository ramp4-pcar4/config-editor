import{_ as g,b4 as D}from"./index-DiOGazkl.js";import{B as y}from"./TextureFormat-Cl0ugX3E-DD0Aw8RG.js";import{t as m}from"./enums-DBi1-Mm2-CUS1pvQe.js";function S(){return C??(C=(async()=>{const e=await g(()=>import("./basis_encoder-QK0wY8EP-B4fUGqC0.js"),[],import.meta.url),n=await e.default({locateFile:a=>D(`esri/libs/basisu/${a}`)});return n.initializeBasis(),n})()),C}let C;function R(){return A??(A=(async()=>await(await g(async()=>{const{default:e}=await import("./dxt_encoder-DXgFKsFV-C93dPa6P.js");return{default:e}},[],import.meta.url)).default({locateFile:e=>D(`esri/libs/dxtEncoder/${e}`)}))()),A}let A,B,X,c=null,d=null;class _{constructor(n,a){this.internalFormat=n,this.compressedTexture=a}}async function j(e){var a;const n=v(e.data,e.flipped);if(e.hasS3TC){d||await x();const r=new Uint8Array(n.length);d==null||d.encode(new Uint8Array(n),e.width,e.height,r);const t=H(r,!0),l=[r.buffer];return{result:new _((t==null?void 0:t.internalFormat)??null,(t==null?void 0:t.textureData)??null),transferList:l}}if(e.hasETC){c||await b();const r=await F(n,e.width,e.height,e.hasMipmap),t=r?await O(r):null,l=((a=t==null?void 0:t.compressedTexture)==null?void 0:a.levels.map(s=>s.buffer))||[];return{result:new _((t==null?void 0:t.internalFormat)??null,(t==null?void 0:t.compressedTexture)??null),transferList:l}}return{result:new _(null,null)}}async function b(){c||(c=await(B??(B=S())))}async function x(){d||(d=await(X??(X=R())))}async function F(e,n,a,r,t=255,l=0,s=!1,o=!1){if(!c)return null;const i=new c.BasisEncoder;i.setPerceptual(!o),i.setCheckForAlpha(!0),i.setForceAlpha(!1),i.setRenormalize(o),i.setMipGen(r),i.setMipSRGB(!o),i.setCreateKTX2File(!0),i.setKTX2SRGBTransferFunc(!o),i.setQualityLevel(t),i.setCompressionLevel(l);const h=new Uint8Array(e.byteLength);i.setSliceSourceImage(0,new Uint8Array(e),n,a,s);const w=i.encode(h),u=new Uint8Array(h.buffer,0,w),f=new c.KTX2File(new Uint8Array(u));return f.isValid()?(i.delete(),u):(f.close(),f.delete(),i.delete(),null)}async function O(e){if(!c)return new _(null,null);const n=new c.KTX2File(new Uint8Array(e));n.startTranscoding();const[a,r]=n.getHasAlpha()?[y.ETC2_RGBA,m.COMPRESSED_RGBA8_ETC2_EAC]:[y.ETC1_RGB,m.COMPRESSED_RGB8_ETC2],t=n.getLevels(),l=[];for(let s=0;s<t;s++)l.push(new Uint8Array(n.getImageTranscodedSizeInBytes(s,0,0,a))),n.transcodeImage(l[s],s,0,0,a,0,-1,-1);return n.close(),n.delete(),{internalFormat:r,compressedTexture:{type:"compressed",levels:l}}}function v(e,n=!1){const a=new OffscreenCanvas(e.width,e.height),r=a.getContext("2d");return n&&r.scale(1,-1),r.drawImage(e,0,n?-e.height:0),r.getImageData(0,0,a.width,a.height).data}const G=31,M=1,I=2,P=3,U=4,L=7,K=21,k=131072;function T(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const z=T("DXT1"),$=T("DXT3"),V=T("DXT5");function H(e,n){const a=new Int32Array(e.buffer,e.byteOffset,G);let r,t;switch(a[K]){case z:r=8,t=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $:r=16,t=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case V:r=16,t=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let l=1,s=a[U],o=a[P];(3&s||3&o)&&(s=s+3&-4,o=o+3&-4);const i=s,h=o;let w,u;a[I]&k&&n!==!1&&(l=Math.max(1,a[L]));let f=e.byteOffset+a[M]+4;const p=[];for(let E=0;E<l;++E)u=(s+3>>2)*(o+3>>2)*r,w=new Uint8Array(e.buffer,f,u),p.push(w),f+=u,s=Math.max(1,s>>1),o=Math.max(1,o>>1);return{textureData:{type:"compressed",levels:p},internalFormat:t,width:i,height:h}}export{_ as TextureCompressionWorkerOutput,j as compress,F as compressRGBADataToKTX2,O as createTextureDataKTX2,b as initializeBasisEncoder,x as initializeDXTEncoder};
