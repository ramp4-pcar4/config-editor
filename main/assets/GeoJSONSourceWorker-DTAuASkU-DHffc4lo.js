import{fu as I,h as E,cw as D,iI as N,cx as v,aM as M,a6 as P,ap as Z,N as G,bu as R}from"./index-1o7Uo5_u.js";import{g as B}from"./asyncUtils-BPUlNCrX-CkkepdUd.js";import{U as $,u as z,X as L,R as Y,L as U}from"./featureConversionUtils-Bjjlcfdo-DBscn84a.js";import{M as W}from"./executeQueryForSnapping-BsS9M1AV-B3v2zFfE.js";import{I as J}from"./FeatureStore-DfjNNhD_-aEZLqC8D.js";import{p as b,h as w}from"./queryUtils-DZy8hWx3-DicACFOE.js";import{K as X}from"./QueryEngine-B7NH52mH-CntrtTkM.js";import{_ as H,Q as K,Y as V}from"./geojson-BLilYCbg-B-AeEckg.js";import{f as ee,A as te,d as ie}from"./clientSideDefaults-BoAP7ZAL-BJ75vsF8.js";import{b as se,C as T,w as q,a as F,A as k,q as re}from"./sourceUtils-k2zbXRon-cNqmu4FX.js";import{o as C}from"./FieldsIndex-Bt0Y8aWr-kDDZWN53.js";import{i as ne}from"./fieldType-PhcL4ff8-C5l4Xhbr.js";import"./OptimizedFeature-mIz_HhJg-C57oCGL9.js";import"./memoryEstimations-DeWfxwaV-BkHZOUz_.js";import"./OptimizedGeometry-pzfNw1AT-xA5ExCXo.js";import"./OptimizedFeatureSet-Dz5hF8Qm-B1brSkRC.js";import"./normalizeUtils-u00NGW3M-CuGOcFat.js";import"./normalizeUtilsCommon-ClagynAA-Tfm8XoVn.js";import"./utils-BO8hgPs3-BIQC0bAi.js";import"./utils-DpLVEUvg-CaXyb1MK.js";import"./timeSupport-C2LrHIeW-DHR7DyD8.js";import"./BoundsStore-DffHzOYo-DeWoKUME.js";import"./PooledRBush-DfSXIoUa-CB8dahAz.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./optimizedFeatureQueryEngineAdapter-LiTJLGWN-DA1wRbpD.js";import"./projectionUtils-B-CplN3q-D6LxMKAS.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./WhereClauseCache-CixYkZwn-WdUHiOZq.js";import"./LRUCache-DPWdPNTF-BhV6gJVw.js";import"./MemCache-qDGoejB7-Bz_y0gIH.js";import"./WhereClause-D4rZJkVN-Bl05IqjQ.js";import"./TimeOnly-CGkId3bj-CuJK0GhJ.js";import"./enum-g1DWyQyu-jWerItqO.js";import"./UnknownTimeZone-DxjyzFvs-_hTnE99V.js";import"./QueryEngineCapabilities-CFs6iCek-Cjdn3gaY.js";import"./quantizationUtils-D907S7Bm-CqNf5i3i.js";import"./utils-s7ypkCzr-BaL8Vtik.js";import"./TimeExtent-Cf2Pienb-Cf2x6jj_.js";import"./heatmapUtils-DRTN9U3a-2KMn4PSI.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./utils-CdIngiRE-Cko2_K7t.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-C2pUVsZe.js";import"./intl-BAA1onnp-CqFGGOQF.js";import"./timeZoneUtils-d5p0Jda1-DOnF-q59.js";import"./utils-CKRJGBD_-B9-M7Wal.js";import"./ClassBreaksDefinition-BZ4FJdWb-CnX9g6KV.js";import"./SnappingCandidate-DIiHATRz-CuetCfU1.js";import"./FixedIntervalBinParameters-CsFyInBi-Brl0d4l7.js";import"./NormalizationBinParametersMixin-70JA0FRq-CzvIgXqs.js";import"./Scheduler-BV4C4cVP-BMUiOznT.js";import"./debugFlags-8tOwPnHK-Efdkzy2c.js";import"./date-B2Zfy8vK-4Z7B9PBN.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:re};class lt{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),s=H(i,{geometryType:e.geometryType}),o=e.fields||s.fields||[],l=e.hasZ!=null?e.hasZ:s.hasZ,p=s.geometryType;let y=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let u=e.timeInfo;o===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});const d=new C(o);let n=d.get(y);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,y=n.name):(n={alias:y,name:y,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(n));const m={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!ne.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=D(a);_!==void 0&&(m[a.name]=_)}a.length==null&&(a.length=N(a))}if(u){if(u.startTimeField){const a=d.get(u.startTimeField);a?(u.startTimeField=a.name,a.type="esriFieldTypeDate"):u.startTimeField=null}if(u.endTimeField){const a=d.get(u.endTimeField);a?(u.endTimeField=a.name,a.type="esriFieldTypeDate"):u.endTimeField=null}if(u.trackIdField){const a=d.get(u.trackIdField);a?u.trackIdField=a.name:(u.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:u}}))}u.startTimeField||u.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:u}}),u=null)}const h=p?ie(p):void 0,c=d.dateFields.length?{timeZoneIANA:v}:null,g={warnings:r,featureErrors:[],layerDefinition:{...ae,drawingInfo:h??void 0,templates:ee(m),extent:void 0,geometryType:p,objectIdField:y,fields:o,hasZ:!!l,timeInfo:u,dateFieldsTimeReference:c}},O={type:"object-id",fieldName:y};this._queryEngine=new X({fieldsIndex:C.fromLayerJSON({fields:o,timeInfo:u,dateFieldsTimeReference:c}),geometryType:p,hasM:!1,hasZ:l,featureIdInfo:O,spatialReference:f,timeInfo:u,featureStore:new J({geometryType:p,hasM:!1,hasZ:l})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=te(m,y);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const A=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(A);const{fullExtent:Q,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=Q,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([se(t,r),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),W(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=B(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const o=this._normalizeFeatures(s);o&&this._queryEngine.featureStore.addMany(o)},s=>{this._queryEngine.featureStore.clear(),M(s)||P.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:i}=this._queryEngine,s=K(e,{geometryType:t,hasZ:r,objectIdField:i});if(!Z(this._queryEngine.spatialReference,I))for(const o of s)o.geometry!=null&&(o.geometry=$(w(z(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,i=(await G(t??"",{responseType:"json",query:{...r},signal:e})).data;return V(i),i}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:i}=this._queryEngine,s=[];for(const o of e){const l=this._createDefaultAttributes(),p=T(i,l,o.attributes,!0);p?t==null||t.push(p):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[r],s.push(o))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:i}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(s,t),r!=null&&r.length&&this._applyUpdateEdits(s,r),i==null?void 0:i.length){for(const p of i)s.deleteResults.push(q(p));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:l,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:i,hasM:s,hasZ:o,objectIdField:l,spatialReference:p,featureStore:y,fieldsIndex:f}=this._queryEngine,u=[],d={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&i!==R(n.geometry)){r.push(F("Incorrect geometry type."));continue}const m=this._createDefaultAttributes(),h=T(f,m,n.attributes);if(h)r.push(h);else{if(this._assignObjectId(m,n.attributes),n.attributes=m,n.uid!=null){const c=n.attributes[l];e.uidToObjectId[n.uid]=c}if(n.geometry!=null){const c=n.geometry.spatialReference??p;n.geometry=w(k(n.geometry,c),c,p)}u.push(n),r.push(q(n.attributes[l]))}}y.addMany(L([],u,i,o,s,d))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:i,hasZ:s,objectIdField:o,spatialReference:l,featureStore:p,fieldsIndex:y}=this._queryEngine,f={type:"object-id",fieldName:o};for(const u of t){const{attributes:d,geometry:n}=u,m=d==null?void 0:d[o];if(m==null){e.push(F(`Identifier field ${o} missing`));continue}if(!p.has(m)){e.push(F(`Feature with object id ${m} missing`));continue}const h=Y(p.getFeature(m),r,s,i);if(n!=null){if(r!==R(n)){e.push(F("Incorrect geometry type."));continue}const c=n.spatialReference??l;h.geometry=w(k(n,c),c,l)}if(d){const c=T(y,h.attributes,d);if(c){e.push(c);continue}}p.add(U(h,r,s,i,f)),e.push(q(m))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(i=Math.max(i,s.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,r=!1){const i=this._queryEngine.objectIdField;e[i]=r&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{lt as default};
