import{q as d,ad as M}from"./index-JysQxb7m.js";import{x as C}from"./colorUtils-Eg6lOlXm-BTgDJreF.js";import{o as I}from"./FieldsIndex-Bt0Y8aWr-xBUfP_A6.js";import{$ as x}from"./ArcadeExpression-XjY3x7KV-Co23DuzJ.js";import{S,L as u,w as k,p as O,Z as h,Q as N,b as P}from"./utils-BfXZnjCE-CGCN-wqd.js";import T from"./callExpressionWithFeature-Bk8k1lJI-CgsGuQ9Y.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./UnknownTimeZone-DxjyzFvs-ChSwQqMk.js";import"./timeZoneUtils-d5p0Jda1-RjSvF6yi.js";import"./TimeOnly-CGkId3bj-DEVsu_Sy.js";import"./enum-g1DWyQyu-Cl9-UFcN.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./quantizationUtils-D907S7Bm-DuTV0eJk.js";const g=y=>{if(!y)return[0,0,0,0];const{r:e,g:r,b:i,a:o}=y;return[e,r,i,255*o]},s=class s{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let o=!1;for(const t of i)if(t.primitiveName===e.primitiveName){o=!0;break}if(!o)for(const t of r)t.primitiveName===e.primitiveName&&i.push(t)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const o of e.effects)s.findApplicableOverrides(o,r,i);if(e.symbolLayers)for(const o of e.symbolLayers)s.findApplicableOverrides(o,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const o of e.effects)s.findApplicableOverrides(o,r,i);if(e.markerPlacement&&s.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const o of e.markerGraphics)s.findApplicableOverrides(o,r,i),s.findApplicableOverrides(o.symbol,r,i)}else e.type==="CIMCharacterMarker"?s.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?s.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&s.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&S(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=u(e),o=e.primitiveName,t=[];for(const a of r)a.primitiveName===o&&t.push(u(a));return{type:"cim-effect-param",effect:i,overrides:k(t)}}static async resolveSymbolOverrides(e,r,i,o,t,a,c){if(!(e!=null&&e.symbol))return null;let{symbol:p,primitiveOverrides:l}=e;const m=!!l;if(!m&&!o)return p;p=d(p),l=d(l);let v=!0;if(r||(r={attributes:{}},v=!1),m){if(v||(l=l.filter(f=>{var n;return!((n=f.valueExpressionInfo)!=null&&n.expression.includes("$feature"))})),c||(l=l.filter(f=>{var n;return!((n=f.valueExpressionInfo)!=null&&n.expression.includes("$view"))})),l.length>0){const f=O(r.attributes),n={spatialReference:i,fields:f,geometryType:t};await s.createRenderExpressions(l,n),s.evaluateOverrides(l,r,t??"esriGeometryPoint",a,c,new I(f))}s.applyOverrides(p,l)}return o&&s.applyDictionaryTextOverrides(p,r,o,null),p}static async createRenderExpressions(e,r){const i=[];for(const o of e){const t=o.valueExpressionInfo;if(!t||s._expressionToRenderExpression.has(t.expression))continue;const a=x(t.expression,r.spatialReference);i.push(a),a.then(c=>s._expressionToRenderExpression.set(t.expression,c))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,o,t,a){const c={$view:{scale:t==null?void 0:t.scale}};for(const p of e){p.value&&typeof p.value=="object"&&C(p.value)&&(p.propertyName==="Color"||p.propertyName==="StrokeColor")&&(p.value=g(p.value));const l=p.valueExpressionInfo;if(!l)continue;const m=s._expressionToRenderExpression.get(l.expression);m&&(p.value=T(m,r,c,i,a,o))}}static applyDictionaryTextOverrides(e,r,i,o,t="Normal"){if(e!=null&&e.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const a=e.symbolLayers;if(!a)return;for(const c of a)c&&c.type==="CIMVectorMarker"&&s.applyDictionaryTextOverrides(c,r,i,o,e.type==="CIMTextSymbol"?e.textCase:t)}break;case"CIMVectorMarker":{const a=e.markerGraphics;if(!a)return;for(const c of a)c&&s.applyDictionaryTextOverrides(c,r,i,o)}break;case"CIMMarkerGraphic":{const a=e.textString;if(a&&a.includes("[")){const c=h(a,i);e.textString=N(r,c,o,t)}}}}static applyOverrides(e,r,i,o){if(e.primitiveName){for(const t of r)if(t.primitiveName===e.primitiveName){const a=P(t.propertyName);if(o&&o.push({cim:e,nocapPropertyName:a,value:e[a]}),i){let c=!1;for(const p of i)p.primitiveName===e.primitiveName&&(c=!0);c||i.push(t)}t.value!=null&&(e[a]=t.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const t of e.effects)s.applyOverrides(t,r,i,o);if(e.symbolLayers)for(const t of e.symbolLayers)s.applyOverrides(t,r,i,o);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const t of e.effects)s.applyOverrides(t,r,i,o);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const t of e.markerGraphics)s.applyOverrides(t,r,i,o),s.applyOverrides(t.symbol,r,i,o)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new M(r).toRgba();return i[3]*=255,i}return r}};s._expressionToRenderExpression=new Map;let b=s;export{b as OverrideHelper};
