import{a5 as l,j7 as h,j8 as o,iw as p,gr as c}from"./index-DT_2vTqg.js";import{n as e,i as m,f as u}from"./memoryEstimations-iHVpvWPf-BPOfuqjq.js";import"./Field-Cj6Pz3TI-MOMvkSrj.js";function b(){return l("curve-densification-coarse-segments")}function f(){return l("curve-densification-max-segments")}function d(){return l("curve-densification-min-segments")}function v(){return l("curve-densification-pixels-per-segment")}class k{constructor(s,i,r){this.uid=s,this.geometry=i,this.attributes=r,this.visible=!0,this.objectId=null,this.centroid=null}}function j(t){return t.geometry!=null}class z{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function Z(t){var s;if(t==null)return 0;switch(t.type){case"point":return e+10+8+24;case"polyline":case"polygon":{let i=0;const r=2+(t.hasZ?1:0)+(t.hasM?1:0),n=t.type==="polyline"?t.paths:t.rings;if((s=t.type==="polyline"?t.curvePaths:t.curveRings)!=null&&s.length){const a=3*f()*128;i=8*a*r+128*a+32*(n.length+1)}else i=u(n);return e+64+i+34}case"multipoint":{const i=u(t.points);return e+i+64+34+32}case"extent":return e+10+64+34;case"mesh":{const i=t.vertexAttributes;return e+m(i.position,i.normal,i.uv,i.tangent)}default:return e}}function I(t,s){switch(h(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[3]=t.x,s[1]=s[4]=t.y,t.hasZ&&(s[2]=s[5]=t.z);break;case"polyline":for(let i=0;i<t.paths.length;i++)o(s,t.paths[i],!!t.hasZ);break;case"polygon":for(let i=0;i<t.rings.length;i++)o(s,t.rings[i],!!t.hasZ);break;case"multipoint":o(s,t.points,!!t.hasZ);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[3]=t.xmax,s[4]=t.ymax,t.zmin!=null&&(s[2]=t.zmin),t.zmax!=null&&(s[5]=t.zmax)}}function w(t,s){switch(p(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[2]=t.x,s[1]=s[3]=t.y;break;case"polyline":for(let i=0;i<t.paths.length;i++)c(s,t.paths[i]);break;case"polygon":for(let i=0;i<t.rings.length;i++)c(s,t.rings[i]);break;case"multipoint":c(s,t.points);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[2]=t.xmax,s[3]=t.ymax}}function F(t,s){return t.objectId!=null?t.objectId:t.attributes&&s?t.attributes[s]:null}function N(t,s,i,r){if(s!=null&&s.size&&i!=null&&t)for(const n in t){if(!s.has(n))continue;const a=t[n];typeof a=="string"&&a.length>i&&(r(n),t[n]="")}}export{F as I,w as Z,k as b,j as d,b as g,f as h,N as j,Z as k,z as v,v as x,d as y,I as z};
