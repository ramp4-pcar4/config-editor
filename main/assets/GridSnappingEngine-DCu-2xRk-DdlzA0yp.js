import{ac as L,ay as V,a6 as O,df as z,v as s,S as l,n as B}from"./index-JysQxb7m.js";import{B as X}from"./vec32-Cj8pVsU0-Cq-HgVHC.js";import{U as E,O as G}from"./projectionUtils-B-CplN3q-DYZZu_-u.js";import{l as D}from"./normalizeUtils-u00NGW3M-DJIcJS3H.js";import{f as W}from"./scaleUtils-Br-smv3A-Bls3RUkB.js";import{L as q,U as H,j as I}from"./gridUtils-ZkKc2j-y-Cmdlvifl.js";import{a9 as m,d as J,X as Y,aa as T,V as _}from"./SketchViewModel-B0qFHK0t-92x10Nsv.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./normalizeUtilsCommon-ClagynAA-DgLRsjpR.js";import"./utils-BO8hgPs3-ESkgk50Y.js";import"./utils-DpLVEUvg-Cr3RAbYo.js";import"./geodesicUtils-DKS2UG72-CDZ866Ix.js";import"./UpdatingHandles-Bd2FQ26N-CoxDITBt.js";import"./GraphicsLayer-BiEC2-gS-X1BXWd5O.js";import"./GraphicsCollection-uWAVmks7-C1GM3TJR.js";import"./Layer-DvVVmz9x-CQh7OSfC.js";import"./TimeExtent-Cf2Pienb-DstDmVgA.js";import"./BlendLayer-DjW_5k0v-HONeExWo.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-Bu_6JrpW.js";import"./parser-CWccHtwJ-ClH7aFqe.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-d4wDSfI3.js";import"./ScaleRangeLayer-x42fwED3-DuReLbie.js";import"./ElevationInfo-DE5to86a-D9mR-AIA.js";import"./lengthUtils-C61nRlXw-CbFzxkTc.js";import"./elevationInfoUtils-Ccn2Wfoe-CzrZeLi4.js";import"./editableLayers-DFUBlMJy-CghCkhUG.js";import"./utils-Dd8gTonD-CQWa1OZh.js";import"./Queue-DV3gpSdl-D_5qVZo7.js";import"./Version-CnwD6MZa-BFgcISMZ.js";import"./Cyclical-DgD7_U1C-DWXsOhyZ.js";import"./quantityUtils-B1Ov7DZK-GyqFFU0L.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CkowXrDb-3zFQ3LNH.js";import"./projectVectorToVector-DcyiGOWJ-DQfXK2e-.js";import"./projectPointToVector-BZJhoF_5-Dr300XgW.js";import"./asyncUtils-BPUlNCrX-BS2LVKAY.js";import"./Query-n1aoaaFC-BH8Wj8dd.js";import"./Field-BIQ-quF4-CELMLVTM.js";import"./fieldType-PhcL4ff8-Dx3imvn-.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./plane-Cf3Koz3c-DCCEvwZa.js";import"./vectorStacks-5ZZtmT9E-Yd4fhXgC.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./sphere-zPMQWhGG-DHiNq8Z2.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./geodeticLengthOperator-DHGBHzf3-CiCC-N0K.js";import"./geodeticCurveType-D_etKnbP-CirnHLSB.js";import"./earcut-C6NeZYSh-Da0ULCQ5.js";import"./triangle-BM89wdHY-C4RiBl_1.js";import"./lineSegment-BAWQVP9P-BrsFXHnG.js";import"./spatialReferenceEllipsoidUtils-BK0OQJn2-ErlLtZyA.js";let o=class extends L{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:V(this.view.rotation??0)}get gridRotation(){var t;return V(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t||!E(i.center.spatialReference,t))return null;try{const r=G(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?D(r.x,this.view.center.x,t):r.x;return m(n,r.y,r.z)}catch(r){return O.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:q(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?z(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?H(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,e){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=e.feature)!=null&&u.attributes&&J in e.feature.attributes)return[];const p=e.coordinateHelper.arrayToPoint(t),a=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(p,a)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:p,gridCenter:a,viewMetersPerPixel:u,viewMetersPerSRUnit:g,offsetScaleFactor:S,spatialReference:h,gridMetersPerStride:C,pixelsPerStride:U}=this;if(!(r&&u&&g&&a&&h&&S&&C&&U)||!r.dynamicScaling&&U<I||!E(t.spatialReference,h))return e;const w=G(t,h),$=m(w.x,w.y,w.z),c=f($,-p,a,-n),P=C/g*S,d=k(c,P,a),{shouldSnapX:v,shouldSnapY:y}=A(d,c,i,u,g);if(!v&&!y)return[];const j=m((v?d:c)[0],(y?d:c)[1]),M=f(j,p,a,n),b=f(d,p,a,n);if(y){const R=F(d,c,P,"y"),x=f(R,p,a,n);e.push(new Y({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=F(d,c,P,"x"),x=f(R,p,a,n);e.push(new Y({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&y&&e.push(new T(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([B("esri.views.interactive.snapping.GridSnappingEngine")],o);const f=(t,i,e,r)=>{const n=_(t[0],t[1],t[2]);return X(n,X(n,n,e,i),e,r)},k=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,p=Math.trunc(r),a=Math.trunc(n),u=Math.round(r%1),g=Math.round(n%1),S=e[0]+(p+u)*i,h=e[1]+(a+g)*i;return m(S,h)},A=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const p=(t[0]-i[0])/r,a=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(p*n)<e,shouldSnapY:Math.abs(a*n)<e}},F=(t,i,e,r)=>{if(r==="y"){const p=i[0]>t[0]?1:-1;return m(t[0]+e*p,t[1])}const n=i[1]>t[1]?1:-1;return m(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
