import{c as m,bP as Z,a5 as M,H as p,b as f,ag as w,T as ee,dO as se,ah as te,b3 as oe,e9 as $,d_ as j,G as re,kO as ne,a8 as ae,ea as D,X as ie}from"./index-C8m3jhgc.js";import{a as ce}from"./uuid-Dj9mdEVg-BaKSCiyT.js";import{T as pe,B as le,i as k,v as I,O as ue}from"./External-BcEXC8Ad-C0-3ruD4.js";import{i as me,n as de,s as fe,x as ge,b as he}from"./FeatureType-MZ846Ius-BY35OZQx.js";import{w as we}from"./MeshTransform-CvTryVbE-Doi97MIP.js";import{e as ye,s as be}from"./meshFeatureAttributes-72y3WnNN-C6ulJrqw.js";import"./labelingInfo-D9WqyhOx-DRzM0fRI.js";import"./Field-Cj6Pz3TI-ByZDJlm_.js";import"./fieldType-VTpxE-EM-BwVu7TAV.js";import"./Query-CxQYWcUQ-DQFSvrsp.js";import"./TimeExtent-gZaEUVeW-BJxSd7M2.js";import"./SimpleRenderer-ADQlYl8U-BozHxNBQ.js";import"./commonProperties-BLIn8DYU-te3BK1cG.js";import"./colorRamps-KMmVdCPJ-IldyGzzl.js";import"./ColorStop-DoHCvOqO-DH82WTuy.js";import"./visualVariableUtils-BO-_wo28-CKo3AW1i.js";import"./lengthUtils-wU9RRIqK-Cfmv-SV3.js";import"./UniqueValueRenderer-BmoLL_Ee-WAX_-d_L.js";import"./diffUtils-BSe9IE26-BODWUFPE.js";import"./RendererLegendOptions-f5mIImtQ-DjUg407A.js";import"./styleUtils-DxAOZq5S-BN2g5w8P.js";import"./RelationshipQuery-BgG1nLP1-BCDCewk8.js";import"./NormalizationBinParametersMixin-ZkplD1Sk-BBDi1y5-.js";import"./labelUtils-Dd5sr1UJ-I494zoGq.js";import"./mat4-BFStKTjU-eFKmoA7r.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./mat4f64-BaJwL7tQ-k0uMm8LY.js";import"./quat-D8L_R4I0-B7PMZ9PX.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec32-BuqRmYBM-CIiFy01h.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./axisAngleDegrees-nTnQhoaG-7L8IvnaZ.js";const y="upload-assets",b=()=>new Error;class Pe extends m{constructor(){super(`${y}:unsupported`,"Layer does not support asset uploads.",b())}}let Te=class extends m{constructor(){super(`${y}:no-glb-support`,"Layer does not support glb.",b())}},ve=class extends m{constructor(){super(`${y}:no-supported-source`,"No supported external source found",b())}};class xe extends m{constructor(){super(`${y}:not-base-64`,"Expected gltf data in base64 format after conversion.",b())}}let Ae=class extends m{constructor(){super(`${y}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",b())}},Me=class extends m{constructor(s,t){super(`${y}:bad-response`,`Bad response. Uploaded ${s} items and received ${t} results.`,b())}};class je extends m{constructor(t,e){super(`${y}-layer:upload-failed`,`Failed to upload mesh file ${t}. Error code: ${(e==null?void 0:e.code)??"-1"}. Error message: ${(e==null?void 0:e.messages)??"unknown"}`,b())}}let R=class extends m{constructor(s){super(`${y}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${s}, but it does not list it in its supported formats.`,b())}},Fe=class extends m{constructor(){super(`${y}:convert3D-failed`,"convert3D failed.")}},qs=class extends m{constructor(){super("invalid-input:no-model","No supported model found")}},Ls=class extends m{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}};function Se(s){const t=1/Z(s,1);return t!==1?new we({scale:[t,t,t]}):void 0}const F={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function P(s,t=o=>{},e){return new _e(s,t,e)}let _e=class{constructor(s,t=o=>{},e){if(this.onProgress=t,this.taskName=e,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof s=="number"){this._weights={};for(let o=0;o<s;o++){const r=o,n=1/s;this._weights[r]=n,this._progressMap.set(r,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[t,e]of this._progressMap.entries())s+=e*this._weights[t];if(s===1&&M("enable-feature:esri-3dofl-upload-timings")){const t=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${t} sec`);for(const[e,o]of this._timingsMap){const r=Math.round(o.end-o.start)/1e3,n=Math.round(r/t*100);console.log(this.taskName??"Task",{stepKey:e,stepTime:r,relativeTime:n})}}this.onProgress(s)}setProgress(s,t){if(this._progressMap.set(s,t),M("enable-feature:esri-3dofl-upload-timings")){const e=performance.now();this._startTime??(this._startTime=e);const o=te(this._timingsMap,s,()=>({start:e,end:0}));t===1&&(o.end=e)}this.emitProgress()}simulate(s,t){return B(e=>this.setProgress(s,e),t)}makeOnProgress(s){return t=>this.setProgress(s,t)}};function B(s=e=>{},t=ke){const e=performance.now();s(0);const o=setInterval(()=>{const r=performance.now()-e,n=1-Math.exp(-r/t);s(n)},De);return oe(()=>{clearInterval(o),s(1)})}function Ee(s,t=Oe){return $(D(s*C/t))}function Ne(s,t=$e){return $(D(s*C/t))}const Oe=10,$e=10,C=8e-6,De=j(50),ke=j(1e3),U=1e6,O=20*U,Ie=2e9,Re=3;async function Be({data:s,name:t,description:e},o,r){let n=null;try{const a=w(o,"uploads"),i=w(a,"info"),{data:l}=await f(i,{query:{f:"json"},responseType:"json"});p(r);const g=ie(o),h=l.maxUploadFileSize*U,d=g?Ie:h,c=g?Math.min(O,h):O;if(s.size>d)throw new Error("Data too large");const G=w(a,"register"),{data:S}=await f(G,{query:{f:"json",itemName:Ce(t),description:e},responseType:"json",method:"post"});if(p(r),!S.success)throw new Error("Registration failed");const{itemID:W}=S.item;n=w(a,W);const J=w(n,"uploadPart"),_=Math.ceil(s.size/c),T=new Array;for(let u=0;u<_;++u)T.push(s.slice(u*c,Math.min((u+1)*c,s.size)));const v=T.slice().reverse(),E=new Array,K=P(_,r==null?void 0:r.onProgress,"uploadItem"),X=async()=>{for(;v.length!==0;){const u=T.length-v.length,x=v.pop(),A=new FormData,V=K.simulate(u,Ee(x.size));try{A.append("f","json"),A.append("file",x),A.append("partId",`${u}`);const{data:Y}=await f(J,{timeout:0,body:A,responseType:"json",method:"post"});if(p(r),!Y.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let u=0;u<Re&&v.length!==0;++u)E.push(X());await Promise.all(E);const Q=w(n,"commit"),{data:N}=await f(Q,{query:{f:"json",parts:T.map((u,x)=>x).join(",")},responseType:"json",method:"post"});if(p(r),!N.success)throw new Error("Commit failed");return N.item}catch(a){if(n!=null){const i=w(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ce(s){return s.replaceAll("/","_").replaceAll("\\","_")}async function Ue(s,t,e){var n;const o=s.length;if(!o)return(n=e==null?void 0:e.onProgress)==null||n.call(e,1),[];const r=P(o,e==null?void 0:e.onProgress,"uploadAssets");return Promise.all(s.map((a,i)=>qe(a,t,{...e,onProgress:r.makeOnProgress(i)})))}async function qe(s,{layer:t,ongoingUploads:e},o){var a;const r=e.get(s);if(r)return r;if(!ns(t))throw new Pe;if(Le(s,t))return(a=o==null?void 0:o.onProgress)==null||a.call(o,1),s;const n=ze(s,t,o);e.set(s,n);try{await n}finally{e.delete(s)}return s}function Le(s,t){const{parsedUrl:e}=t;return e!=null&&s.metadata.externalSources.some(o=>pe(o,e))}async function ze(s,t,e){const{metadata:o}=s,{displaySource:r}=o,n=q(r==null?void 0:r.source,t,{checkForConversionRequired:M("enable-feature:georeferenced-uploads")}),a=n!=null?He(n,t,e):o.externalSources.length>0?Ge(s,t,e):We(s,t,e),i=await a;return p(e),s.addExternalSources([i]),s}async function He(s,t,e){return{source:await L(s,t,e),original:!0,unitConversionDisabled:!0}}async function Ge(s,t,e){const o=H(t),{externalSources:r}=s.metadata,n=Ke(r,t);if(!n)throw new ve;const a=P(F.uploadConvertibleSource,e==null?void 0:e.onProgress,"uploadConvertibleSource"),i=await L(n,t,{onProgress:a.makeOnProgress("uploadEditSource")});s.addExternalSources([{source:i,original:!0}]);const l=n.reduce((h,{asset:d})=>d instanceof File?h+d.size:h,0),g=a.simulate("serviceAssetsToGlb",Ne(l));try{const{source:h,transform:d,origin:c}=await ss(i,t,o);return s.transform=d,c&&(s.metadata.georeferenced=!0,e!=null&&e.useAssetOrigin&&(s.vertexSpace.origin=[c.x,c.y,c.z??0],s.spatialReference=c.spatialReference)),{source:h,unitConversionDisabled:!0}}finally{g.remove()}}async function We(s,t,e){const o=P(F.uploadLocalMesh,e==null?void 0:e.onProgress,"uploadLocalMesh"),r=Je(s,t,{...e,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await z([r],t,{...e,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:s.extent.clone(),original:!0}}async function Je(s,t,e){const o=H(t),r=await s.load(e),n=await r.toBinaryGLTF({origin:r.origin,signal:e==null?void 0:e.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return p(e),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${ce()}.glb`,assetType:o}}function Ke(s,t){for(const e of s){const o=q(e.source,t);if(o)return o}return null}function q(s,{infoFor3D:t},e={}){if(!s)return null;const{supportedFormats:o,editFormats:r}=t,n=ue(s),a=new Array,i=me(t),l=de(t);let g=!1;for(const h of n){const d=Xe(h,o);if(!d)return null;const{assetType:c}=d;if(e.checkForConversionRequired&&(c===i||c===l))return null;r.includes(c)&&(g=!0),a.push(d)}return g?a:null}function Xe(s,t){const e=le(s,t);return e?{asset:s,assetType:e}:null}async function L(s,t,e){return z(s.map(o=>Qe(o,e)),t,e)}async function z(s,t,e){const o=P(F.uploadAssetBlobs,e==null?void 0:e.onProgress,"uploadAssetBlobs"),r=await Ye(s,t,{...e,onProgress:o.makeOnProgress("prepareAssetItems")});p(e);const n=r.map(({item:i})=>i),{uploadResults:a}=await Ze(n,t,{...e,onProgress:o.makeOnProgress("uploadAssetItems")});return p(e),s.map((i,l)=>es(r[l],a[l],t))}async function Qe(s,t){const{asset:e,assetType:o}=s;if(e instanceof File)return{blob:e,assetName:e.name,assetType:o};const r=await e.toBlob(t);return p(t),{blob:r,assetName:e.assetName,assetType:o}}async function Ve(s,t,e){const{blob:o,assetType:r,assetName:n}=s;let a=null;try{const i=await Be({data:o,name:n},t.url,e);p(e),a={assetType:r,assetUploadId:i.itemID}}catch(i){re(i),as().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!a){const i=await ne(o);if(p(e),!i.isBase64)throw new xe;a={assetType:r,assetData:i.data}}if(!a)throw new Ae;return{item:a,assetName:n}}function Ye(s,t,e){const o=P(s.length,e==null?void 0:e.onProgress,"prepareAssetItems");return Promise.all(s.map(async(r,n)=>{const a=Ve(await r,t,{...e,onProgress:o.makeOnProgress(n)});return p(e),a}))}async function Ze(s,t,e){const o=B(e==null?void 0:e.onProgress);try{const r=await f(w(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(p(e),r.data.uploadResults.length!==s.length)throw new Me(s.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function es(s,t,e){const{success:o}=t;if(!o){const{error:g}=t;throw new je(s.assetName,g)}const{assetHash:r}=t,{assetName:n,item:{assetType:a}}=s,{infoFor3D:{supportedFormats:i}}=e,l=fe(a,i);if(!l)throw new R(a);return new k(n,l,[new I(`${e.parsedUrl.path}/assets/${r}`,r)])}async function ss(s,t,e){var n;const o=s.map(({assetName:a,parts:i})=>({assetName:a,assetHash:i[0].partHash}));let r;try{const a=w(t.parsedUrl.path,"convert3D"),i=(n=t.capabilities)==null?void 0:n.operations.supportsAsyncConvert3D;r=(await(i?rs:os)(a,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:e,async:i},responseType:"json",timeout:0})).data}catch{throw new Fe}return ts(t,r)}function ts(s,t){const e={source:t.assets.map(o=>{const r=ge(o.contentType,s.infoFor3D.supportedFormats);if(!r)throw new R(r);return new k(o.assetName,o.contentType,[new I(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(M("enable-feature:georeferenced-uploads")&&t.transform){if(e.transform=ye(t.transform),t.spatialReference){const o=ee.fromJSON(t.spatialReference);e.origin=be(t.transform,o)}}else e.transform=Se(s.spatialReference);return e}function os(s,t){return f(s,t)}async function rs(s,t){const e=(await f(s,t)).data.statusUrl;for(;;){const o=(await f(e,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await se(is)}}function ns(s){return!!s.infoFor3D&&!!s.url}function H({infoFor3D:s}){const t=he(s);if(!t)throw new Te;return t}function as(){return ae.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const is=j(1e3),zs=Object.freeze(Object.defineProperty({__proto__:null,uploadAssets:Ue},Symbol.toStringTag,{value:"Module"}));export{qs as i,Ls as m,Se as t,zs as u};
