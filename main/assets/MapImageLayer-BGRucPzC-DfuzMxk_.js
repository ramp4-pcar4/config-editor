import{G as O,N as b,O as g,$ as T,b as f,s as P,c as x,R as L,v as o,I as a,J as E,U as M,S as F,t as R}from"./index-BcWBQvu1.js";import{y as J}from"./loadAll-BIhJ1RSe-D0Y7WGox.js";import{o as N,l as U,i as $,X as j}from"./PortalLayer-rRU66wtN-4T7YDcte.js";import{c as _}from"./scaleUtils-DtnDbXa5-Dt5JSEHb.js";import{U as q}from"./Layer-B8q-l4yV-CupBcNoh.js";import{c as A}from"./FeatureType-MZ846Ius-CIRWw86g.js";import{J as V,B as k,C}from"./SublayersOwner-CvsAZfE5-B-rkcq5z.js";import{a as B}from"./ArcGISService-CdvDPeWS-w_YiRifE.js";import{d as z,f as G}from"./ScaleRangeLayer-DIxukUBC-Bamk9BOz.js";import{L as H}from"./popupUtils-BiEhUPlu-BHIUtihP.js";import{T as W}from"./RefreshableLayer-yYqabqcs-BirBwudI.js";import{N as Z}from"./TemporalLayer-DxgXU1f--bZbbB-tg.js";import{r as D}from"./ExportImageParameters-BFIpXRBd-CldXRe-B.js";import{i as K}from"./imageBitmapUtils-D8LZDu4M-D9xfTsCd.js";import{f as S}from"./sublayerUtils-CVtBGavp-BskrC7jd.js";import{a as X}from"./versionUtils-DDW8eV12-BCLEPUrS.js";import{j as Q}from"./TimeExtent-gZaEUVeW-BAp4H8RE.js";import{C as I}from"./timeZoneUtils-z3WjfjXQ-BSZKhDQq.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./ElevationInfo-DkWlof50-DaYIROLW.js";import"./lengthUtils-wU9RRIqK-BlZAX8e_.js";import"./PortalItem-CJetnHeq-BptYPU2H.js";import"./portalItemUtils-DsrxEt4W-D6sk5cWA.js";import"./projection-m8vi7Cxv-B8O5gc-_.js";import"./labelingInfo-D9WqyhOx-D7dpFku2.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./Field-Cj6Pz3TI-Cf5yuLDE.js";import"./fieldType-VTpxE-EM-xOb8kqCl.js";import"./Query-CxQYWcUQ-CxkBOzvD.js";import"./SimpleRenderer-ADQlYl8U-CN0yineO.js";import"./commonProperties-BLIn8DYU-Cr_NE1sV.js";import"./colorRamps-KMmVdCPJ-Cb-hvOtj.js";import"./ColorStop-DoHCvOqO-CzGMFqy-.js";import"./visualVariableUtils-BO-_wo28-BDrKGR1G.js";import"./UniqueValueRenderer-BmoLL_Ee-BuiNLNMG.js";import"./diffUtils-BSe9IE26-5FvsD1qI.js";import"./RendererLegendOptions-f5mIImtQ-8emOTJXb.js";import"./styleUtils-DxAOZq5S-CzIKWSeG.js";import"./RelationshipQuery-BgG1nLP1-qCSjBaRs.js";import"./NormalizationBinParametersMixin-ZkplD1Sk-DA21Up6u.js";import"./labelUtils-Dd5sr1UJ-DnndMR0b.js";import"./Version-BTMwSXf1-LuMx4kh0.js";import"./CollectionFlattener-9hYRBLDX-Cdfhtm2R.js";import"./QueryTask-DjXUtGiO-DviPNSAQ.js";import"./utils-DuaeuwP5-CRf6bB61.js";import"./executeForIds-MucOSmLz-DlmHYTjz.js";import"./query-nJmB7Ppn-2LZFh-JH.js";import"./normalizeUtils-b-vZURob-BKxgSG4k.js";import"./utils-Jw-4AGsF-BRiKk67F.js";import"./pbfQueryUtils-1j64fqcx-C6IVUol1.js";import"./pbf-Ijhb7ANA-BL0QwUz1.js";import"./memoryEstimations-iHVpvWPf-7G5hNXoi.js";import"./OptimizedGeometry-1qDYm3YK-JQGls0Yz.js";import"./OptimizedFeatureSet-D6mgsKNr-7d8j9uMk.js";import"./queryZScale-DBCLQqDI-CaflY5_0.js";import"./executeQueryPBF-Dc29GEvp-CE-92h06.js";import"./featureConversionUtils-DRaHTjrY-2OeRDlb0.js";import"./FeatureSet-Dxf4LeOj-BNm966tO.js";import"./executeQueryJSON-BK4r1MU--BzU8BTL5.js";import"./FieldsIndex-Y7EBAYp0-C6we7QC1.js";import"./typeUtils-I5iG5ZKA-Bj2lxRPs.js";import"./ClassBreaksRenderer-D97YzbWp-CkhbmMTh.js";import"./LRUCache-BLmkvs7b-DmeLH1K1.js";import"./MemCache-BCippCv6-RtDaJMc_.js";import"./utils-BYqzY6_X-DK7K8nmr.js";import"./defaultCIMValues-gWpu7WSC-cjxb95kj.js";import"./enums-f9UUstHQ-hLTu4V1l.js";import"./heatmapUtils--OU2Fakh-DNYg4DKR.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./jsonUtils-DzmXEA9_-CsE6vrfH.js";import"./parser-hXQyB-Qx-B58HRtHN.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-B_JhQhkc.js";import"./floorFilterUtils-4r-vVdzs-u-jw2p7F.js";let i=class extends z(Z(G(V(k(B(N(U($(W(A(H(q)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new D({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(O).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,t){var l,d,v;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=b(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((v=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&v.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=S(s,m,g.SERVICE)}else if(h>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=S(s,m.sublayers,b(m.origin))}}const y=[],u={writeSublayerStructure:p,...t};let c=p||this.hasVisibleLayersForOrigin(h);s.forEach(m=>{const w=m.write({},u);y.push(w),c=c||m.originOf("visible")==="user"}),y.some(m=>Object.keys(m).length>1)&&(r.layers=y),c&&(r.visibleLayers=s.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,n,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=_({extent:e,width:r})*s;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},y=e==null?void 0:e.spatialReference,u=T(y);p.dpi*=s;const c={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();c.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:u,imageSR:u,size:r+","+n,...p,...h,...c}}async fetchImage(e,r,n,t){const{data:s}=await this._fetchImage("image",e,r,n,t);return s}async fetchImageBitmap(e,r,n,t){const{data:s,url:p}=await this._fetchImage("blob",e,r,n,t);return K(s,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,r),{extent:t,fullExtent:s,timeExtent:p}=n,h=t||s;return{fullExtent:h&&P.fromJSON(h),timeExtent:p&&Q.fromJSON({start:p[0],end:p[1]})}}loadAll(){return J(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return X(this,e)}async _fetchImage(e,r,n,t,s){var y,u,c;const p={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((y=p.query)==null?void 0:y.dynamicLayers)!=null&&!((c=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&c.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await f(h,p);return{data:l,url:h}}catch(l){throw L(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};o([a(I("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([a()],i.prototype,"dpi",void 0),o([a()],i.prototype,"gdbVersion",void 0),o([a()],i.prototype,"imageFormat",void 0),o([E("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([a()],i.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a(I("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([M("sublayers",{layers:{type:[C]},visibleLayers:{type:[F]}})],i.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([a(j)],i.prototype,"url",void 0),i=o([R("esri.layers.MapImageLayer")],i);const St=i;export{St as default};
